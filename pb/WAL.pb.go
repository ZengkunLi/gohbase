// Code generated by protoc-gen-go.
// source: WAL.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ScopeType int32

const (
	ScopeType_REPLICATION_SCOPE_LOCAL  ScopeType = 0
	ScopeType_REPLICATION_SCOPE_GLOBAL ScopeType = 1
	ScopeType_REPLICATION_SCOPE_SERIAL ScopeType = 2
)

var ScopeType_name = map[int32]string{
	0: "REPLICATION_SCOPE_LOCAL",
	1: "REPLICATION_SCOPE_GLOBAL",
	2: "REPLICATION_SCOPE_SERIAL",
}
var ScopeType_value = map[string]int32{
	"REPLICATION_SCOPE_LOCAL":  0,
	"REPLICATION_SCOPE_GLOBAL": 1,
	"REPLICATION_SCOPE_SERIAL": 2,
}

func (x ScopeType) Enum() *ScopeType {
	p := new(ScopeType)
	*p = x
	return p
}
func (x ScopeType) String() string {
	return proto.EnumName(ScopeType_name, int32(x))
}
func (x *ScopeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ScopeType_value, data, "ScopeType")
	if err != nil {
		return err
	}
	*x = ScopeType(value)
	return nil
}
func (ScopeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor26, []int{0} }

type FlushDescriptor_FlushAction int32

const (
	FlushDescriptor_START_FLUSH  FlushDescriptor_FlushAction = 0
	FlushDescriptor_COMMIT_FLUSH FlushDescriptor_FlushAction = 1
	FlushDescriptor_ABORT_FLUSH  FlushDescriptor_FlushAction = 2
	FlushDescriptor_CANNOT_FLUSH FlushDescriptor_FlushAction = 3
)

var FlushDescriptor_FlushAction_name = map[int32]string{
	0: "START_FLUSH",
	1: "COMMIT_FLUSH",
	2: "ABORT_FLUSH",
	3: "CANNOT_FLUSH",
}
var FlushDescriptor_FlushAction_value = map[string]int32{
	"START_FLUSH":  0,
	"COMMIT_FLUSH": 1,
	"ABORT_FLUSH":  2,
	"CANNOT_FLUSH": 3,
}

func (x FlushDescriptor_FlushAction) Enum() *FlushDescriptor_FlushAction {
	p := new(FlushDescriptor_FlushAction)
	*p = x
	return p
}
func (x FlushDescriptor_FlushAction) String() string {
	return proto.EnumName(FlushDescriptor_FlushAction_name, int32(x))
}
func (x *FlushDescriptor_FlushAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FlushDescriptor_FlushAction_value, data, "FlushDescriptor_FlushAction")
	if err != nil {
		return err
	}
	*x = FlushDescriptor_FlushAction(value)
	return nil
}
func (FlushDescriptor_FlushAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor26, []int{4, 0}
}

type RegionEventDescriptor_EventType int32

const (
	RegionEventDescriptor_REGION_OPEN  RegionEventDescriptor_EventType = 0
	RegionEventDescriptor_REGION_CLOSE RegionEventDescriptor_EventType = 1
)

var RegionEventDescriptor_EventType_name = map[int32]string{
	0: "REGION_OPEN",
	1: "REGION_CLOSE",
}
var RegionEventDescriptor_EventType_value = map[string]int32{
	"REGION_OPEN":  0,
	"REGION_CLOSE": 1,
}

func (x RegionEventDescriptor_EventType) Enum() *RegionEventDescriptor_EventType {
	p := new(RegionEventDescriptor_EventType)
	*p = x
	return p
}
func (x RegionEventDescriptor_EventType) String() string {
	return proto.EnumName(RegionEventDescriptor_EventType_name, int32(x))
}
func (x *RegionEventDescriptor_EventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RegionEventDescriptor_EventType_value, data, "RegionEventDescriptor_EventType")
	if err != nil {
		return err
	}
	*x = RegionEventDescriptor_EventType(value)
	return nil
}
func (RegionEventDescriptor_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor26, []int{7, 0}
}

type WALHeader struct {
	HasCompression    *bool   `protobuf:"varint,1,opt,name=has_compression,json=hasCompression" json:"has_compression,omitempty"`
	EncryptionKey     []byte  `protobuf:"bytes,2,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	HasTagCompression *bool   `protobuf:"varint,3,opt,name=has_tag_compression,json=hasTagCompression" json:"has_tag_compression,omitempty"`
	WriterClsName     *string `protobuf:"bytes,4,opt,name=writer_cls_name,json=writerClsName" json:"writer_cls_name,omitempty"`
	CellCodecClsName  *string `protobuf:"bytes,5,opt,name=cell_codec_cls_name,json=cellCodecClsName" json:"cell_codec_cls_name,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *WALHeader) Reset()                    { *m = WALHeader{} }
func (m *WALHeader) String() string            { return proto.CompactTextString(m) }
func (*WALHeader) ProtoMessage()               {}
func (*WALHeader) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{0} }

func (m *WALHeader) GetHasCompression() bool {
	if m != nil && m.HasCompression != nil {
		return *m.HasCompression
	}
	return false
}

func (m *WALHeader) GetEncryptionKey() []byte {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *WALHeader) GetHasTagCompression() bool {
	if m != nil && m.HasTagCompression != nil {
		return *m.HasTagCompression
	}
	return false
}

func (m *WALHeader) GetWriterClsName() string {
	if m != nil && m.WriterClsName != nil {
		return *m.WriterClsName
	}
	return ""
}

func (m *WALHeader) GetCellCodecClsName() string {
	if m != nil && m.CellCodecClsName != nil {
		return *m.CellCodecClsName
	}
	return ""
}

//
// Protocol buffer version of WALKey; see WALKey comment, not really a key but WALEdit header
// for some KVs
type WALKey struct {
	EncodedRegionName []byte  `protobuf:"bytes,1,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	TableName         []byte  `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	LogSequenceNumber *uint64 `protobuf:"varint,3,req,name=log_sequence_number,json=logSequenceNumber" json:"log_sequence_number,omitempty"`
	WriteTime         *uint64 `protobuf:"varint,4,req,name=write_time,json=writeTime" json:"write_time,omitempty"`
	//
	// This parameter is deprecated in favor of clusters which
	// contains the list of clusters that have consumed the change.
	// It is retained so that the log created by earlier releases (0.94)
	// can be read by the newer releases.
	ClusterId        *UUID          `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	Scopes           []*FamilyScope `protobuf:"bytes,6,rep,name=scopes" json:"scopes,omitempty"`
	FollowingKvCount *uint32        `protobuf:"varint,7,opt,name=following_kv_count,json=followingKvCount" json:"following_kv_count,omitempty"`
	//
	// This field contains the list of clusters that have
	// consumed the change
	ClusterIds         []*UUID `protobuf:"bytes,8,rep,name=cluster_ids,json=clusterIds" json:"cluster_ids,omitempty"`
	NonceGroup         *uint64 `protobuf:"varint,9,opt,name=nonceGroup" json:"nonceGroup,omitempty"`
	Nonce              *uint64 `protobuf:"varint,10,opt,name=nonce" json:"nonce,omitempty"`
	OrigSequenceNumber *uint64 `protobuf:"varint,11,opt,name=orig_sequence_number,json=origSequenceNumber" json:"orig_sequence_number,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *WALKey) Reset()                    { *m = WALKey{} }
func (m *WALKey) String() string            { return proto.CompactTextString(m) }
func (*WALKey) ProtoMessage()               {}
func (*WALKey) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{1} }

func (m *WALKey) GetEncodedRegionName() []byte {
	if m != nil {
		return m.EncodedRegionName
	}
	return nil
}

func (m *WALKey) GetTableName() []byte {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *WALKey) GetLogSequenceNumber() uint64 {
	if m != nil && m.LogSequenceNumber != nil {
		return *m.LogSequenceNumber
	}
	return 0
}

func (m *WALKey) GetWriteTime() uint64 {
	if m != nil && m.WriteTime != nil {
		return *m.WriteTime
	}
	return 0
}

func (m *WALKey) GetClusterId() *UUID {
	if m != nil {
		return m.ClusterId
	}
	return nil
}

func (m *WALKey) GetScopes() []*FamilyScope {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *WALKey) GetFollowingKvCount() uint32 {
	if m != nil && m.FollowingKvCount != nil {
		return *m.FollowingKvCount
	}
	return 0
}

func (m *WALKey) GetClusterIds() []*UUID {
	if m != nil {
		return m.ClusterIds
	}
	return nil
}

func (m *WALKey) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return 0
}

func (m *WALKey) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *WALKey) GetOrigSequenceNumber() uint64 {
	if m != nil && m.OrigSequenceNumber != nil {
		return *m.OrigSequenceNumber
	}
	return 0
}

type FamilyScope struct {
	Family           []byte     `protobuf:"bytes,1,req,name=family" json:"family,omitempty"`
	ScopeType        *ScopeType `protobuf:"varint,2,req,name=scope_type,json=scopeType,enum=pb.ScopeType" json:"scope_type,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *FamilyScope) Reset()                    { *m = FamilyScope{} }
func (m *FamilyScope) String() string            { return proto.CompactTextString(m) }
func (*FamilyScope) ProtoMessage()               {}
func (*FamilyScope) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{2} }

func (m *FamilyScope) GetFamily() []byte {
	if m != nil {
		return m.Family
	}
	return nil
}

func (m *FamilyScope) GetScopeType() ScopeType {
	if m != nil && m.ScopeType != nil {
		return *m.ScopeType
	}
	return ScopeType_REPLICATION_SCOPE_LOCAL
}

// *
// Special WAL entry to hold all related to a compaction.
// Written to WAL before completing compaction.  There is
// sufficient info in the below message to complete later
// the * compaction should we fail the WAL write.
type CompactionDescriptor struct {
	TableName         []byte   `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	EncodedRegionName []byte   `protobuf:"bytes,2,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	FamilyName        []byte   `protobuf:"bytes,3,req,name=family_name,json=familyName" json:"family_name,omitempty"`
	CompactionInput   []string `protobuf:"bytes,4,rep,name=compaction_input,json=compactionInput" json:"compaction_input,omitempty"`
	CompactionOutput  []string `protobuf:"bytes,5,rep,name=compaction_output,json=compactionOutput" json:"compaction_output,omitempty"`
	StoreHomeDir      *string  `protobuf:"bytes,6,req,name=store_home_dir,json=storeHomeDir" json:"store_home_dir,omitempty"`
	RegionName        []byte   `protobuf:"bytes,7,opt,name=region_name,json=regionName" json:"region_name,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *CompactionDescriptor) Reset()                    { *m = CompactionDescriptor{} }
func (m *CompactionDescriptor) String() string            { return proto.CompactTextString(m) }
func (*CompactionDescriptor) ProtoMessage()               {}
func (*CompactionDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{3} }

func (m *CompactionDescriptor) GetTableName() []byte {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *CompactionDescriptor) GetEncodedRegionName() []byte {
	if m != nil {
		return m.EncodedRegionName
	}
	return nil
}

func (m *CompactionDescriptor) GetFamilyName() []byte {
	if m != nil {
		return m.FamilyName
	}
	return nil
}

func (m *CompactionDescriptor) GetCompactionInput() []string {
	if m != nil {
		return m.CompactionInput
	}
	return nil
}

func (m *CompactionDescriptor) GetCompactionOutput() []string {
	if m != nil {
		return m.CompactionOutput
	}
	return nil
}

func (m *CompactionDescriptor) GetStoreHomeDir() string {
	if m != nil && m.StoreHomeDir != nil {
		return *m.StoreHomeDir
	}
	return ""
}

func (m *CompactionDescriptor) GetRegionName() []byte {
	if m != nil {
		return m.RegionName
	}
	return nil
}

// *
// Special WAL entry to hold all related to a flush.
type FlushDescriptor struct {
	Action              *FlushDescriptor_FlushAction            `protobuf:"varint,1,req,name=action,enum=pb.FlushDescriptor_FlushAction" json:"action,omitempty"`
	TableName           []byte                                  `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	EncodedRegionName   []byte                                  `protobuf:"bytes,3,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	FlushSequenceNumber *uint64                                 `protobuf:"varint,4,opt,name=flush_sequence_number,json=flushSequenceNumber" json:"flush_sequence_number,omitempty"`
	StoreFlushes        []*FlushDescriptor_StoreFlushDescriptor `protobuf:"bytes,5,rep,name=store_flushes,json=storeFlushes" json:"store_flushes,omitempty"`
	RegionName          []byte                                  `protobuf:"bytes,6,opt,name=region_name,json=regionName" json:"region_name,omitempty"`
	XXX_unrecognized    []byte                                  `json:"-"`
}

func (m *FlushDescriptor) Reset()                    { *m = FlushDescriptor{} }
func (m *FlushDescriptor) String() string            { return proto.CompactTextString(m) }
func (*FlushDescriptor) ProtoMessage()               {}
func (*FlushDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{4} }

func (m *FlushDescriptor) GetAction() FlushDescriptor_FlushAction {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return FlushDescriptor_START_FLUSH
}

func (m *FlushDescriptor) GetTableName() []byte {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *FlushDescriptor) GetEncodedRegionName() []byte {
	if m != nil {
		return m.EncodedRegionName
	}
	return nil
}

func (m *FlushDescriptor) GetFlushSequenceNumber() uint64 {
	if m != nil && m.FlushSequenceNumber != nil {
		return *m.FlushSequenceNumber
	}
	return 0
}

func (m *FlushDescriptor) GetStoreFlushes() []*FlushDescriptor_StoreFlushDescriptor {
	if m != nil {
		return m.StoreFlushes
	}
	return nil
}

func (m *FlushDescriptor) GetRegionName() []byte {
	if m != nil {
		return m.RegionName
	}
	return nil
}

type FlushDescriptor_StoreFlushDescriptor struct {
	FamilyName       []byte   `protobuf:"bytes,1,req,name=family_name,json=familyName" json:"family_name,omitempty"`
	StoreHomeDir     *string  `protobuf:"bytes,2,req,name=store_home_dir,json=storeHomeDir" json:"store_home_dir,omitempty"`
	FlushOutput      []string `protobuf:"bytes,3,rep,name=flush_output,json=flushOutput" json:"flush_output,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FlushDescriptor_StoreFlushDescriptor) Reset()         { *m = FlushDescriptor_StoreFlushDescriptor{} }
func (m *FlushDescriptor_StoreFlushDescriptor) String() string { return proto.CompactTextString(m) }
func (*FlushDescriptor_StoreFlushDescriptor) ProtoMessage()    {}
func (*FlushDescriptor_StoreFlushDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor26, []int{4, 0}
}

func (m *FlushDescriptor_StoreFlushDescriptor) GetFamilyName() []byte {
	if m != nil {
		return m.FamilyName
	}
	return nil
}

func (m *FlushDescriptor_StoreFlushDescriptor) GetStoreHomeDir() string {
	if m != nil && m.StoreHomeDir != nil {
		return *m.StoreHomeDir
	}
	return ""
}

func (m *FlushDescriptor_StoreFlushDescriptor) GetFlushOutput() []string {
	if m != nil {
		return m.FlushOutput
	}
	return nil
}

type StoreDescriptor struct {
	FamilyName         []byte   `protobuf:"bytes,1,req,name=family_name,json=familyName" json:"family_name,omitempty"`
	StoreHomeDir       *string  `protobuf:"bytes,2,req,name=store_home_dir,json=storeHomeDir" json:"store_home_dir,omitempty"`
	StoreFile          []string `protobuf:"bytes,3,rep,name=store_file,json=storeFile" json:"store_file,omitempty"`
	StoreFileSizeBytes *uint64  `protobuf:"varint,4,opt,name=store_file_size_bytes,json=storeFileSizeBytes" json:"store_file_size_bytes,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *StoreDescriptor) Reset()                    { *m = StoreDescriptor{} }
func (m *StoreDescriptor) String() string            { return proto.CompactTextString(m) }
func (*StoreDescriptor) ProtoMessage()               {}
func (*StoreDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{5} }

func (m *StoreDescriptor) GetFamilyName() []byte {
	if m != nil {
		return m.FamilyName
	}
	return nil
}

func (m *StoreDescriptor) GetStoreHomeDir() string {
	if m != nil && m.StoreHomeDir != nil {
		return *m.StoreHomeDir
	}
	return ""
}

func (m *StoreDescriptor) GetStoreFile() []string {
	if m != nil {
		return m.StoreFile
	}
	return nil
}

func (m *StoreDescriptor) GetStoreFileSizeBytes() uint64 {
	if m != nil && m.StoreFileSizeBytes != nil {
		return *m.StoreFileSizeBytes
	}
	return 0
}

// *
// Special WAL entry used for writing bulk load events to WAL
type BulkLoadDescriptor struct {
	TableName         *TableName         `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	EncodedRegionName []byte             `protobuf:"bytes,2,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	Stores            []*StoreDescriptor `protobuf:"bytes,3,rep,name=stores" json:"stores,omitempty"`
	BulkloadSeqNum    *int64             `protobuf:"varint,4,req,name=bulkload_seq_num,json=bulkloadSeqNum" json:"bulkload_seq_num,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *BulkLoadDescriptor) Reset()                    { *m = BulkLoadDescriptor{} }
func (m *BulkLoadDescriptor) String() string            { return proto.CompactTextString(m) }
func (*BulkLoadDescriptor) ProtoMessage()               {}
func (*BulkLoadDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{6} }

func (m *BulkLoadDescriptor) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *BulkLoadDescriptor) GetEncodedRegionName() []byte {
	if m != nil {
		return m.EncodedRegionName
	}
	return nil
}

func (m *BulkLoadDescriptor) GetStores() []*StoreDescriptor {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *BulkLoadDescriptor) GetBulkloadSeqNum() int64 {
	if m != nil && m.BulkloadSeqNum != nil {
		return *m.BulkloadSeqNum
	}
	return 0
}

// *
// Special WAL entry to hold all related to a region event (open/close).
type RegionEventDescriptor struct {
	EventType         *RegionEventDescriptor_EventType `protobuf:"varint,1,req,name=event_type,json=eventType,enum=pb.RegionEventDescriptor_EventType" json:"event_type,omitempty"`
	TableName         []byte                           `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	EncodedRegionName []byte                           `protobuf:"bytes,3,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	LogSequenceNumber *uint64                          `protobuf:"varint,4,opt,name=log_sequence_number,json=logSequenceNumber" json:"log_sequence_number,omitempty"`
	Stores            []*StoreDescriptor               `protobuf:"bytes,5,rep,name=stores" json:"stores,omitempty"`
	Server            *ServerName                      `protobuf:"bytes,6,opt,name=server" json:"server,omitempty"`
	RegionName        []byte                           `protobuf:"bytes,7,opt,name=region_name,json=regionName" json:"region_name,omitempty"`
	XXX_unrecognized  []byte                           `json:"-"`
}

func (m *RegionEventDescriptor) Reset()                    { *m = RegionEventDescriptor{} }
func (m *RegionEventDescriptor) String() string            { return proto.CompactTextString(m) }
func (*RegionEventDescriptor) ProtoMessage()               {}
func (*RegionEventDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{7} }

func (m *RegionEventDescriptor) GetEventType() RegionEventDescriptor_EventType {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return RegionEventDescriptor_REGION_OPEN
}

func (m *RegionEventDescriptor) GetTableName() []byte {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *RegionEventDescriptor) GetEncodedRegionName() []byte {
	if m != nil {
		return m.EncodedRegionName
	}
	return nil
}

func (m *RegionEventDescriptor) GetLogSequenceNumber() uint64 {
	if m != nil && m.LogSequenceNumber != nil {
		return *m.LogSequenceNumber
	}
	return 0
}

func (m *RegionEventDescriptor) GetStores() []*StoreDescriptor {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *RegionEventDescriptor) GetServer() *ServerName {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *RegionEventDescriptor) GetRegionName() []byte {
	if m != nil {
		return m.RegionName
	}
	return nil
}

// *
// A trailer that is appended to the end of a properly closed WAL file.
// If missing, this is either a legacy or a corrupted WAL file.
// N.B. This trailer currently doesn't contain any information and we
// purposefully don't expose it in the WAL APIs. It's for future growth.
type WALTrailer struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *WALTrailer) Reset()                    { *m = WALTrailer{} }
func (m *WALTrailer) String() string            { return proto.CompactTextString(m) }
func (*WALTrailer) ProtoMessage()               {}
func (*WALTrailer) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{8} }

func init() {
	proto.RegisterType((*WALHeader)(nil), "pb.WALHeader")
	proto.RegisterType((*WALKey)(nil), "pb.WALKey")
	proto.RegisterType((*FamilyScope)(nil), "pb.FamilyScope")
	proto.RegisterType((*CompactionDescriptor)(nil), "pb.CompactionDescriptor")
	proto.RegisterType((*FlushDescriptor)(nil), "pb.FlushDescriptor")
	proto.RegisterType((*FlushDescriptor_StoreFlushDescriptor)(nil), "pb.FlushDescriptor.StoreFlushDescriptor")
	proto.RegisterType((*StoreDescriptor)(nil), "pb.StoreDescriptor")
	proto.RegisterType((*BulkLoadDescriptor)(nil), "pb.BulkLoadDescriptor")
	proto.RegisterType((*RegionEventDescriptor)(nil), "pb.RegionEventDescriptor")
	proto.RegisterType((*WALTrailer)(nil), "pb.WALTrailer")
	proto.RegisterEnum("pb.ScopeType", ScopeType_name, ScopeType_value)
	proto.RegisterEnum("pb.FlushDescriptor_FlushAction", FlushDescriptor_FlushAction_name, FlushDescriptor_FlushAction_value)
	proto.RegisterEnum("pb.RegionEventDescriptor_EventType", RegionEventDescriptor_EventType_name, RegionEventDescriptor_EventType_value)
}

var fileDescriptor26 = []byte{
	// 1085 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x72, 0xe2, 0x46,
	0x17, 0x1d, 0x09, 0x9b, 0x31, 0x57, 0x36, 0xe0, 0xb6, 0xfd, 0x7d, 0xd4, 0xe4, 0x67, 0x1c, 0x92,
	0x4c, 0x3c, 0x99, 0x89, 0x2a, 0xc3, 0x26, 0x6b, 0xc0, 0xd8, 0xa6, 0x06, 0x83, 0x4b, 0xc2, 0x95,
	0xa5, 0x4a, 0x48, 0x6d, 0x50, 0x59, 0x46, 0x4a, 0x4b, 0x78, 0x8a, 0xac, 0x66, 0x99, 0x17, 0xc8,
	0x3e, 0x9b, 0x6c, 0xf2, 0x0e, 0x79, 0x80, 0xbc, 0x46, 0x9e, 0x24, 0xb7, 0x6f, 0x8b, 0x1f, 0x03,
	0xae, 0x49, 0x55, 0x66, 0x47, 0x9f, 0x73, 0x74, 0x75, 0x7f, 0xce, 0x6d, 0x04, 0x85, 0x1f, 0xeb,
	0x1d, 0x33, 0x16, 0x51, 0x1a, 0x31, 0x3d, 0x1e, 0x3c, 0x33, 0x2e, 0x1a, 0x6e, 0xc2, 0x15, 0x50,
	0xfd, 0x5b, 0x23, 0xfa, 0x82, 0xbb, 0x3e, 0x17, 0xec, 0x1b, 0x28, 0x8d, 0xdc, 0xc4, 0xf1, 0xa2,
	0xbb, 0x58, 0xf0, 0x24, 0x09, 0xa2, 0x71, 0x45, 0x3b, 0xd6, 0x4e, 0x76, 0xac, 0x22, 0xc2, 0xcd,
	0x05, 0xca, 0xbe, 0x86, 0x22, 0x1f, 0x7b, 0x62, 0x1a, 0xa7, 0x78, 0x72, 0x6e, 0xf9, 0xb4, 0xa2,
	0xa3, 0x6e, 0xd7, 0xda, 0x5b, 0xa0, 0x6f, 0xf9, 0x94, 0x99, 0x70, 0x20, 0xe3, 0xa5, 0xee, 0xf0,
	0x41, 0xcc, 0x1c, 0xc5, 0xdc, 0x47, 0xaa, 0xef, 0x0e, 0x97, 0xc3, 0xbe, 0x80, 0xd2, 0x3b, 0x11,
	0xa4, 0x5c, 0x38, 0x5e, 0x98, 0x38, 0x63, 0xf7, 0x8e, 0x57, 0xb6, 0x50, 0x5b, 0xb0, 0xf6, 0x14,
	0xdc, 0x0c, 0x93, 0x2e, 0x82, 0xec, 0x3b, 0x38, 0xf0, 0x78, 0x18, 0x62, 0x50, 0x9f, 0x7b, 0x0b,
	0xed, 0x36, 0x69, 0xcb, 0x92, 0x6a, 0x4a, 0x26, 0x93, 0x57, 0xff, 0xcc, 0x41, 0x1e, 0x8b, 0xcc,
	0x32, 0xc2, 0x14, 0x91, 0xf4, 0x1d, 0xc1, 0x87, 0x32, 0x79, 0x7a, 0x52, 0x3b, 0xd6, 0x31, 0xfb,
	0xfd, 0x8c, 0xb2, 0x88, 0xa1, 0x37, 0x7d, 0x06, 0x90, 0xba, 0x83, 0x90, 0x2b, 0x99, 0x4e, 0xb2,
	0x02, 0x21, 0x44, 0x63, 0xb8, 0x30, 0x1a, 0x3a, 0x09, 0xff, 0x69, 0x82, 0xcf, 0xa2, 0x6a, 0x72,
	0x37, 0xe0, 0x02, 0x0b, 0xd4, 0x4f, 0xb6, 0xac, 0x7d, 0xa4, 0xec, 0x8c, 0xe9, 0x12, 0x21, 0xc3,
	0x51, 0x25, 0x4e, 0x1a, 0x50, 0x6d, 0x52, 0x56, 0x20, 0xa4, 0x8f, 0x00, 0x7b, 0x05, 0xe0, 0x85,
	0x93, 0x44, 0x36, 0x20, 0xf0, 0xa9, 0x1c, 0xa3, 0xb6, 0x63, 0xc6, 0x03, 0xf3, 0xfa, 0xba, 0x7d,
	0xda, 0xd0, 0x2b, 0x9a, 0x55, 0xc8, 0xf8, 0xb6, 0x8f, 0xc3, 0xca, 0x27, 0x5e, 0x14, 0xf3, 0xa4,
	0x92, 0x3f, 0xce, 0xa1, 0xb0, 0x24, 0x85, 0x67, 0xee, 0x5d, 0x10, 0x4e, 0x6d, 0x89, 0x5b, 0x19,
	0xcd, 0x5e, 0x03, 0xbb, 0x89, 0xc2, 0x30, 0x7a, 0x17, 0x8c, 0x87, 0xce, 0xed, 0x3d, 0x76, 0x6d,
	0x32, 0x4e, 0x2b, 0x4f, 0x31, 0xfa, 0x9e, 0x55, 0x9e, 0x33, 0x6f, 0xef, 0x9b, 0x12, 0x67, 0x2f,
	0xc1, 0x58, 0xe4, 0x90, 0x54, 0x76, 0x28, 0xf6, 0x3c, 0x09, 0x0b, 0xe6, 0x09, 0x24, 0xec, 0x73,
	0x80, 0x71, 0x84, 0xc5, 0x9d, 0x8b, 0x68, 0x12, 0x57, 0x0a, 0x18, 0x70, 0xcb, 0x5a, 0x42, 0xd8,
	0x21, 0x6c, 0xd3, 0xa9, 0x02, 0x44, 0xa9, 0x03, 0xfb, 0x1e, 0x0e, 0x23, 0x11, 0xac, 0x37, 0xcd,
	0x20, 0x11, 0x93, 0xdc, 0xc3, 0xae, 0x55, 0x6d, 0x30, 0x96, 0xea, 0x62, 0xff, 0x83, 0xfc, 0x0d,
	0x1d, 0xb3, 0xb1, 0x65, 0x27, 0xac, 0x13, 0xa8, 0x62, 0x27, 0x9d, 0xc6, 0x6a, 0x56, 0xc5, 0xda,
	0x9e, 0x4c, 0x9c, 0x1e, 0xeb, 0x23, 0x68, 0x15, 0x92, 0xd9, 0xcf, 0xea, 0xef, 0x3a, 0x1c, 0x4a,
	0xef, 0xb9, 0x9e, 0x74, 0xeb, 0x29, 0x4f, 0x3c, 0x11, 0xc4, 0x69, 0x24, 0x56, 0x46, 0xae, 0x6d,
	0x18, 0xf9, 0x26, 0x07, 0xe9, 0x8f, 0x39, 0xe8, 0x39, 0x18, 0x2a, 0x3f, 0xa5, 0xcb, 0x91, 0x0e,
	0x14, 0x44, 0x82, 0x97, 0x50, 0xf6, 0xe6, 0x79, 0x38, 0xc1, 0x38, 0x9e, 0xa4, 0xe8, 0x8c, 0x1c,
	0x3a, 0xb9, 0xb4, 0xc0, 0xdb, 0x12, 0x46, 0x7f, 0xec, 0x2f, 0x49, 0xa3, 0x49, 0x2a, 0xb5, 0xdb,
	0xa4, 0x5d, 0x8a, 0xd1, 0x23, 0x9c, 0x7d, 0x05, 0xc5, 0x04, 0xeb, 0xe1, 0xce, 0x28, 0xba, 0xe3,
	0x8e, 0x1f, 0x08, 0xf4, 0x89, 0x8e, 0xca, 0x5d, 0x42, 0x2f, 0x10, 0x3c, 0x0d, 0x84, 0x4c, 0x6f,
	0xb9, 0x8c, 0xa7, 0xb4, 0xc6, 0x20, 0xe6, 0xf9, 0x57, 0x7f, 0xdd, 0x82, 0xd2, 0x19, 0xce, 0x7c,
	0xb4, 0xd4, 0xa2, 0x1f, 0x20, 0xaf, 0x5e, 0x45, 0xed, 0x29, 0xd6, 0x9e, 0x93, 0xf5, 0x1e, 0x8a,
	0xd4, 0xb9, 0x4e, 0x32, 0x2b, 0x93, 0xff, 0x8b, 0x75, 0xda, 0xd4, 0xdb, 0xdc, 0x63, 0xbd, 0xad,
	0xc1, 0xd1, 0x8d, 0x7c, 0xcb, 0x9a, 0x97, 0xb6, 0xc8, 0x4b, 0x07, 0x44, 0xae, 0xac, 0xe0, 0x25,
	0xec, 0xa9, 0xb6, 0x10, 0x89, 0xdb, 0xb3, 0x4d, 0x0e, 0x3f, 0xd9, 0x54, 0x82, 0x2d, 0x85, 0x2b,
	0x60, 0xd6, 0xbf, 0x33, 0xf5, 0xf4, 0x6a, 0xff, 0xf2, 0xab, 0xfd, 0x7b, 0xf6, 0x5e, 0x83, 0xc3,
	0x4d, 0x71, 0x56, 0x8d, 0xa1, 0xad, 0x19, 0x63, 0x7d, 0x80, 0xfa, 0x86, 0x01, 0x7e, 0x01, 0xbb,
	0xaa, 0x07, 0x99, 0x1d, 0x72, 0x64, 0x07, 0x83, 0x30, 0xe5, 0x04, 0xda, 0x9f, 0xc5, 0x30, 0x58,
	0x09, 0x0c, 0xbb, 0x5f, 0xb7, 0xfa, 0xce, 0x59, 0xe7, 0xda, 0xbe, 0x28, 0x3f, 0x61, 0x65, 0xd8,
	0x6d, 0xf6, 0x2e, 0x2f, 0xdb, 0x33, 0x44, 0x93, 0x92, 0x7a, 0xa3, 0x37, 0x97, 0xe8, 0x24, 0xa9,
	0x77, 0xbb, 0xbd, 0x19, 0x92, 0xab, 0xfe, 0xa1, 0x41, 0x89, 0xea, 0xfa, 0xf8, 0x25, 0xa1, 0x4b,
	0xb2, 0x11, 0x05, 0x21, 0xcf, 0x0a, 0x2a, 0xa8, 0xae, 0x23, 0xc0, 0xde, 0xc0, 0xd1, 0x82, 0x76,
	0x92, 0xe0, 0x67, 0xee, 0x0c, 0xa6, 0x29, 0x4e, 0x52, 0x4d, 0x9d, 0xcd, 0x95, 0x36, 0x52, 0x0d,
	0xc9, 0x54, 0xff, 0xd2, 0x80, 0x35, 0x26, 0xe1, 0x6d, 0x27, 0x72, 0xfd, 0xa5, 0x7c, 0x5f, 0xaf,
	0xad, 0xba, 0xa1, 0x6e, 0x8c, 0xfe, 0xcc, 0x92, 0xff, 0x65, 0xf3, 0x5f, 0xe1, 0x05, 0x2d, 0x53,
	0x49, 0xa8, 0x04, 0xa3, 0x76, 0x40, 0x77, 0xd1, 0xc3, 0x96, 0x59, 0x99, 0x84, 0x9d, 0x40, 0x79,
	0x80, 0x09, 0x86, 0x98, 0xa0, 0x74, 0xb3, 0x34, 0x32, 0xfd, 0x3f, 0xe4, 0xac, 0xe2, 0x0c, 0x47,
	0x23, 0xa3, 0x87, 0xab, 0xef, 0x73, 0x70, 0xa4, 0xde, 0xd2, 0xba, 0xe7, 0xe3, 0x74, 0xa9, 0x9c,
	0x06, 0x00, 0x97, 0x90, 0xba, 0x00, 0xd5, 0x6a, 0x7e, 0x29, 0x5f, 0xba, 0x51, 0x6e, 0xd2, 0x59,
	0x5d, 0x8b, 0x7c, 0xf6, 0xf3, 0x63, 0x6f, 0xe8, 0x23, 0x7f, 0x90, 0x6a, 0x52, 0x1b, 0xfe, 0x20,
	0x17, 0x3d, 0xdb, 0xfe, 0x70, 0xcf, 0x5e, 0xa0, 0x98, 0x8b, 0x7b, 0x2e, 0x68, 0xed, 0x8c, 0x5a,
	0x91, 0xc4, 0x84, 0xd0, 0xec, 0x32, 0xf6, 0xc3, 0x77, 0x9c, 0x09, 0x85, 0x79, 0x33, 0xa4, 0xf7,
	0xad, 0xd6, 0x79, 0xbb, 0xd7, 0x75, 0x7a, 0x57, 0xad, 0xae, 0x5a, 0x8f, 0x0c, 0x68, 0x76, 0x7a,
	0x76, 0xab, 0xac, 0x55, 0x77, 0x01, 0xf0, 0x7b, 0xa2, 0x2f, 0x5c, 0x34, 0x99, 0xf8, 0xd6, 0x87,
	0xc2, 0xfc, 0x1f, 0x86, 0x7d, 0x02, 0xff, 0xb7, 0x5a, 0x57, 0x9d, 0x76, 0xb3, 0xde, 0x97, 0x4f,
	0xd8, 0x4d, 0x0c, 0xe2, 0x74, 0x7a, 0xcd, 0x7a, 0x07, 0x23, 0x7d, 0x0a, 0x95, 0x75, 0xf2, 0xbc,
	0xd3, 0x6b, 0x20, 0xab, 0x6d, 0x66, 0xed, 0x96, 0xd5, 0x46, 0x56, 0x6f, 0x9c, 0xc1, 0x9b, 0x48,
	0x0c, 0x4d, 0x17, 0x2f, 0xf9, 0x11, 0x37, 0x47, 0xae, 0x1f, 0x45, 0xb1, 0x39, 0x1a, 0xc8, 0x4f,
	0xb9, 0x04, 0x4f, 0xdc, 0x57, 0x5f, 0x74, 0x83, 0xc9, 0x8d, 0x39, 0xe4, 0x63, 0x2e, 0xdc, 0x94,
	0xfb, 0x0d, 0xf9, 0x6d, 0x77, 0x25, 0xe1, 0xe4, 0x42, 0xfb, 0x45, 0x7b, 0xf2, 0x9b, 0xa6, 0xfd,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x61, 0xd5, 0x2c, 0x0e, 0x0a, 0x00, 0x00,
}
