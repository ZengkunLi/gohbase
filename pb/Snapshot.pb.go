// Code generated by protoc-gen-go.
// source: Snapshot.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SnapshotFileInfo_Type int32

const (
	SnapshotFileInfo_HFILE SnapshotFileInfo_Type = 1
	SnapshotFileInfo_WAL   SnapshotFileInfo_Type = 2
)

var SnapshotFileInfo_Type_name = map[int32]string{
	1: "HFILE",
	2: "WAL",
}
var SnapshotFileInfo_Type_value = map[string]int32{
	"HFILE": 1,
	"WAL":   2,
}

func (x SnapshotFileInfo_Type) Enum() *SnapshotFileInfo_Type {
	p := new(SnapshotFileInfo_Type)
	*p = x
	return p
}
func (x SnapshotFileInfo_Type) String() string {
	return proto.EnumName(SnapshotFileInfo_Type_name, int32(x))
}
func (x *SnapshotFileInfo_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SnapshotFileInfo_Type_value, data, "SnapshotFileInfo_Type")
	if err != nil {
		return err
	}
	*x = SnapshotFileInfo_Type(value)
	return nil
}
func (SnapshotFileInfo_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{0, 0} }

type SnapshotFileInfo struct {
	Type             *SnapshotFileInfo_Type `protobuf:"varint,1,req,name=type,enum=pb.SnapshotFileInfo_Type" json:"type,omitempty"`
	Hfile            *string                `protobuf:"bytes,3,opt,name=hfile" json:"hfile,omitempty"`
	WalServer        *string                `protobuf:"bytes,4,opt,name=wal_server,json=walServer" json:"wal_server,omitempty"`
	WalName          *string                `protobuf:"bytes,5,opt,name=wal_name,json=walName" json:"wal_name,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *SnapshotFileInfo) Reset()                    { *m = SnapshotFileInfo{} }
func (m *SnapshotFileInfo) String() string            { return proto.CompactTextString(m) }
func (*SnapshotFileInfo) ProtoMessage()               {}
func (*SnapshotFileInfo) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{0} }

func (m *SnapshotFileInfo) GetType() SnapshotFileInfo_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SnapshotFileInfo_HFILE
}

func (m *SnapshotFileInfo) GetHfile() string {
	if m != nil && m.Hfile != nil {
		return *m.Hfile
	}
	return ""
}

func (m *SnapshotFileInfo) GetWalServer() string {
	if m != nil && m.WalServer != nil {
		return *m.WalServer
	}
	return ""
}

func (m *SnapshotFileInfo) GetWalName() string {
	if m != nil && m.WalName != nil {
		return *m.WalName
	}
	return ""
}

type SnapshotRegionManifest struct {
	Version          *int32                                `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	RegionInfo       *RegionInfo                           `protobuf:"bytes,2,req,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	FamilyFiles      []*SnapshotRegionManifest_FamilyFiles `protobuf:"bytes,3,rep,name=family_files,json=familyFiles" json:"family_files,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *SnapshotRegionManifest) Reset()                    { *m = SnapshotRegionManifest{} }
func (m *SnapshotRegionManifest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRegionManifest) ProtoMessage()               {}
func (*SnapshotRegionManifest) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{1} }

func (m *SnapshotRegionManifest) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *SnapshotRegionManifest) GetRegionInfo() *RegionInfo {
	if m != nil {
		return m.RegionInfo
	}
	return nil
}

func (m *SnapshotRegionManifest) GetFamilyFiles() []*SnapshotRegionManifest_FamilyFiles {
	if m != nil {
		return m.FamilyFiles
	}
	return nil
}

type SnapshotRegionManifest_StoreFile struct {
	Name      *string    `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Reference *Reference `protobuf:"bytes,2,opt,name=reference" json:"reference,omitempty"`
	// TODO: Add checksums or other fields to verify the file
	FileSize         *uint64 `protobuf:"varint,3,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SnapshotRegionManifest_StoreFile) Reset()         { *m = SnapshotRegionManifest_StoreFile{} }
func (m *SnapshotRegionManifest_StoreFile) String() string { return proto.CompactTextString(m) }
func (*SnapshotRegionManifest_StoreFile) ProtoMessage()    {}
func (*SnapshotRegionManifest_StoreFile) Descriptor() ([]byte, []int) {
	return fileDescriptor27, []int{1, 0}
}

func (m *SnapshotRegionManifest_StoreFile) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SnapshotRegionManifest_StoreFile) GetReference() *Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *SnapshotRegionManifest_StoreFile) GetFileSize() uint64 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

type SnapshotRegionManifest_FamilyFiles struct {
	FamilyName       []byte                              `protobuf:"bytes,1,req,name=family_name,json=familyName" json:"family_name,omitempty"`
	StoreFiles       []*SnapshotRegionManifest_StoreFile `protobuf:"bytes,2,rep,name=store_files,json=storeFiles" json:"store_files,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *SnapshotRegionManifest_FamilyFiles) Reset()         { *m = SnapshotRegionManifest_FamilyFiles{} }
func (m *SnapshotRegionManifest_FamilyFiles) String() string { return proto.CompactTextString(m) }
func (*SnapshotRegionManifest_FamilyFiles) ProtoMessage()    {}
func (*SnapshotRegionManifest_FamilyFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor27, []int{1, 1}
}

func (m *SnapshotRegionManifest_FamilyFiles) GetFamilyName() []byte {
	if m != nil {
		return m.FamilyName
	}
	return nil
}

func (m *SnapshotRegionManifest_FamilyFiles) GetStoreFiles() []*SnapshotRegionManifest_StoreFile {
	if m != nil {
		return m.StoreFiles
	}
	return nil
}

type SnapshotDataManifest struct {
	TableSchema      *TableSchema              `protobuf:"bytes,1,req,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
	RegionManifests  []*SnapshotRegionManifest `protobuf:"bytes,2,rep,name=region_manifests,json=regionManifests" json:"region_manifests,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *SnapshotDataManifest) Reset()                    { *m = SnapshotDataManifest{} }
func (m *SnapshotDataManifest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotDataManifest) ProtoMessage()               {}
func (*SnapshotDataManifest) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{2} }

func (m *SnapshotDataManifest) GetTableSchema() *TableSchema {
	if m != nil {
		return m.TableSchema
	}
	return nil
}

func (m *SnapshotDataManifest) GetRegionManifests() []*SnapshotRegionManifest {
	if m != nil {
		return m.RegionManifests
	}
	return nil
}

func init() {
	proto.RegisterType((*SnapshotFileInfo)(nil), "pb.SnapshotFileInfo")
	proto.RegisterType((*SnapshotRegionManifest)(nil), "pb.SnapshotRegionManifest")
	proto.RegisterType((*SnapshotRegionManifest_StoreFile)(nil), "pb.SnapshotRegionManifest.StoreFile")
	proto.RegisterType((*SnapshotRegionManifest_FamilyFiles)(nil), "pb.SnapshotRegionManifest.FamilyFiles")
	proto.RegisterType((*SnapshotDataManifest)(nil), "pb.SnapshotDataManifest")
	proto.RegisterEnum("pb.SnapshotFileInfo_Type", SnapshotFileInfo_Type_name, SnapshotFileInfo_Type_value)
}

var fileDescriptor27 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x93, 0xdf, 0x6a, 0xdb, 0x30,
	0x14, 0xc6, 0x91, 0xe3, 0x90, 0xf8, 0x38, 0x4b, 0x83, 0x28, 0xc3, 0xf5, 0x18, 0x2b, 0x61, 0x8c,
	0xb0, 0x31, 0x0d, 0xf2, 0x06, 0x0b, 0x6d, 0x48, 0xa0, 0x1b, 0x43, 0x2e, 0xec, 0xd2, 0xc8, 0xad,
	0x1c, 0x1b, 0x12, 0xcb, 0x48, 0xea, 0x46, 0xf7, 0x04, 0xbb, 0xdc, 0xde, 0x60, 0x2f, 0xb0, 0x77,
	0x9c, 0x24, 0xff, 0x49, 0x3b, 0xd8, 0xee, 0xf4, 0x7d, 0xe7, 0xf8, 0xe8, 0xf7, 0x1d, 0x25, 0x30,
	0x4d, 0x2a, 0x56, 0xab, 0x42, 0x68, 0x52, 0x4b, 0xa1, 0x05, 0xf6, 0xea, 0x2c, 0x1e, 0xaf, 0x93,
	0x46, 0xc5, 0xe1, 0x66, 0xc5, 0x14, 0x6f, 0xc4, 0xfc, 0x37, 0x82, 0x59, 0xd7, 0xbd, 0x2e, 0xf7,
	0x7c, 0x5b, 0xe5, 0x02, 0xbf, 0x05, 0x5f, 0xdf, 0xd7, 0x3c, 0x42, 0xe7, 0xde, 0x62, 0xba, 0x3c,
	0x23, 0x75, 0x46, 0xfe, 0xee, 0x21, 0xd7, 0xa6, 0x81, 0xba, 0x36, 0x7c, 0x0a, 0xc3, 0x22, 0x37,
	0x7e, 0x34, 0x38, 0x47, 0x8b, 0x80, 0x36, 0x02, 0x3f, 0x07, 0xf8, 0xca, 0xf6, 0xa9, 0xe2, 0xf2,
	0x0b, 0x97, 0x91, 0xef, 0x4a, 0x81, 0x71, 0x12, 0x67, 0xe0, 0x33, 0x18, 0xdb, 0x72, 0xc5, 0x0e,
	0x3c, 0x1a, 0xba, 0xe2, 0xc8, 0xe8, 0x8f, 0x46, 0xce, 0x63, 0xf0, 0xed, 0x74, 0x1c, 0xc0, 0x70,
	0xb3, 0xde, 0x5e, 0x5d, 0xce, 0x10, 0x1e, 0xc1, 0xe0, 0xf3, 0xfb, 0xab, 0x99, 0x37, 0xff, 0x31,
	0x80, 0xa7, 0x1d, 0x0b, 0xe5, 0xbb, 0x52, 0x54, 0x1f, 0x58, 0x55, 0xe6, 0x5c, 0x69, 0x1c, 0xc1,
	0xc8, 0x0c, 0x56, 0xc6, 0x32, 0xe0, 0x68, 0x31, 0xa4, 0x9d, 0xc4, 0xef, 0x20, 0x94, 0xae, 0x37,
	0x2d, 0x0d, 0x7a, 0xe4, 0x99, 0x58, 0xe1, 0x72, 0x6a, 0x63, 0x35, 0x23, 0x6c, 0x20, 0x0a, 0xb2,
	0x3f, 0xe3, 0x2d, 0x4c, 0x72, 0x76, 0x28, 0xf7, 0xf7, 0xa9, 0x8d, 0xa2, 0x4c, 0xb0, 0x81, 0xf9,
	0xe2, 0xd5, 0xc3, 0x45, 0x3c, 0xbe, 0x9c, 0xac, 0x5d, 0xbb, 0xdd, 0x8e, 0xa2, 0x61, 0x7e, 0x14,
	0x71, 0x09, 0x41, 0xa2, 0x85, 0xe4, 0x56, 0x61, 0x0c, 0xbe, 0x0b, 0x6c, 0x17, 0x1b, 0x50, 0x77,
	0xc6, 0x6f, 0x20, 0x90, 0x3c, 0xe7, 0x92, 0x57, 0x37, 0xdc, 0xa0, 0x21, 0x73, 0xd1, 0x93, 0x06,
	0xad, 0x35, 0xe9, 0xb1, 0x8e, 0x9f, 0x41, 0x60, 0x89, 0x52, 0x55, 0x7e, 0x6b, 0xd6, 0xed, 0xd3,
	0xb1, 0x35, 0x12, 0xa3, 0xe3, 0x3b, 0x08, 0x1f, 0x60, 0xe0, 0x17, 0xd0, 0x82, 0xa4, 0xfd, 0x9d,
	0x13, 0x0a, 0x8d, 0x65, 0xf7, 0x8c, 0x2f, 0x21, 0x54, 0x16, 0xad, 0x0d, 0xe9, 0xb9, 0x90, 0x2f,
	0xff, 0x13, 0xb2, 0x0f, 0x42, 0x41, 0x75, 0x47, 0x35, 0xff, 0x89, 0xe0, 0xb4, 0xfb, 0xe0, 0x82,
	0x69, 0xd6, 0x3f, 0xc8, 0x12, 0x26, 0x9a, 0x65, 0x96, 0xf6, 0xa6, 0xe0, 0x07, 0xe6, 0x08, 0xc2,
	0xe5, 0x89, 0xbd, 0xe0, 0xda, 0xfa, 0x89, 0xb3, 0x69, 0xa8, 0x8f, 0xc2, 0x30, 0xcd, 0xda, 0xa7,
	0x3a, 0xb4, 0x63, 0x3a, 0xb0, 0xf8, 0xdf, 0x60, 0xf4, 0x44, 0x3e, 0xd2, 0x6a, 0x75, 0x01, 0xaf,
	0x85, 0xdc, 0x11, 0x56, 0x33, 0x33, 0x96, 0x14, 0xec, 0x56, 0x88, 0x9a, 0x14, 0x59, 0xff, 0xbb,
	0xcf, 0xee, 0x72, 0xb2, 0xe3, 0x15, 0x97, 0x4c, 0xf3, 0xdb, 0x55, 0xff, 0x7f, 0xf9, 0x64, 0x6b,
	0x6a, 0x83, 0xbe, 0x23, 0xf4, 0x0b, 0xa1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x42, 0x0d, 0x7d,
	0x95, 0x48, 0x03, 0x00, 0x00,
}
