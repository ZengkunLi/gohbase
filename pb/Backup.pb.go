// Code generated by protoc-gen-go.
// source: Backup.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BackupType int32

const (
	BackupType_FULL        BackupType = 0
	BackupType_INCREMENTAL BackupType = 1
)

var BackupType_name = map[int32]string{
	0: "FULL",
	1: "INCREMENTAL",
}
var BackupType_value = map[string]int32{
	"FULL":        0,
	"INCREMENTAL": 1,
}

func (x BackupType) Enum() *BackupType {
	p := new(BackupType)
	*p = x
	return p
}
func (x BackupType) String() string {
	return proto.EnumName(BackupType_name, int32(x))
}
func (x *BackupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BackupType_value, data, "BackupType")
	if err != nil {
		return err
	}
	*x = BackupType(value)
	return nil
}
func (BackupType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// *
// Backup session states
type BackupInfo_BackupState int32

const (
	BackupInfo_RUNNING   BackupInfo_BackupState = 0
	BackupInfo_COMPLETE  BackupInfo_BackupState = 1
	BackupInfo_FAILED    BackupInfo_BackupState = 2
	BackupInfo_CANCELLED BackupInfo_BackupState = 3
)

var BackupInfo_BackupState_name = map[int32]string{
	0: "RUNNING",
	1: "COMPLETE",
	2: "FAILED",
	3: "CANCELLED",
}
var BackupInfo_BackupState_value = map[string]int32{
	"RUNNING":   0,
	"COMPLETE":  1,
	"FAILED":    2,
	"CANCELLED": 3,
}

func (x BackupInfo_BackupState) Enum() *BackupInfo_BackupState {
	p := new(BackupInfo_BackupState)
	*p = x
	return p
}
func (x BackupInfo_BackupState) String() string {
	return proto.EnumName(BackupInfo_BackupState_name, int32(x))
}
func (x *BackupInfo_BackupState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BackupInfo_BackupState_value, data, "BackupInfo_BackupState")
	if err != nil {
		return err
	}
	*x = BackupInfo_BackupState(value)
	return nil
}
func (BackupInfo_BackupState) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{4, 0} }

// *
// Phases of a backup session in RUNNING state
//
type BackupInfo_BackupPhase int32

const (
	BackupInfo_REQUEST             BackupInfo_BackupPhase = 0
	BackupInfo_SNAPSHOT            BackupInfo_BackupPhase = 1
	BackupInfo_PREPARE_INCREMENTAL BackupInfo_BackupPhase = 2
	BackupInfo_SNAPSHOTCOPY        BackupInfo_BackupPhase = 3
	BackupInfo_INCREMENTAL_COPY    BackupInfo_BackupPhase = 4
	BackupInfo_STORE_MANIFEST      BackupInfo_BackupPhase = 5
)

var BackupInfo_BackupPhase_name = map[int32]string{
	0: "REQUEST",
	1: "SNAPSHOT",
	2: "PREPARE_INCREMENTAL",
	3: "SNAPSHOTCOPY",
	4: "INCREMENTAL_COPY",
	5: "STORE_MANIFEST",
}
var BackupInfo_BackupPhase_value = map[string]int32{
	"REQUEST":             0,
	"SNAPSHOT":            1,
	"PREPARE_INCREMENTAL": 2,
	"SNAPSHOTCOPY":        3,
	"INCREMENTAL_COPY":    4,
	"STORE_MANIFEST":      5,
}

func (x BackupInfo_BackupPhase) Enum() *BackupInfo_BackupPhase {
	p := new(BackupInfo_BackupPhase)
	*p = x
	return p
}
func (x BackupInfo_BackupPhase) String() string {
	return proto.EnumName(BackupInfo_BackupPhase_name, int32(x))
}
func (x *BackupInfo_BackupPhase) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BackupInfo_BackupPhase_value, data, "BackupInfo_BackupPhase")
	if err != nil {
		return err
	}
	*x = BackupInfo_BackupPhase(value)
	return nil
}
func (BackupInfo_BackupPhase) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{4, 1} }

// *
// ServerTimestamp keeps last WAL roll time per Region Server
type ServerTimestamp struct {
	ServerName       *ServerName `protobuf:"bytes,1,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	Timestamp        *uint64     `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ServerTimestamp) Reset()                    { *m = ServerTimestamp{} }
func (m *ServerTimestamp) String() string            { return proto.CompactTextString(m) }
func (*ServerTimestamp) ProtoMessage()               {}
func (*ServerTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ServerTimestamp) GetServerName() *ServerName {
	if m != nil {
		return m.ServerName
	}
	return nil
}

func (m *ServerTimestamp) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

// *
//  TableServerTimestamp keeps last WAL roll time per Region Server & Table
//  Each table have different last WAL roll time stamps across cluster, on every RS
type TableServerTimestamp struct {
	TableName        *TableName         `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	ServerTimestamp  []*ServerTimestamp `protobuf:"bytes,2,rep,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TableServerTimestamp) Reset()                    { *m = TableServerTimestamp{} }
func (m *TableServerTimestamp) String() string            { return proto.CompactTextString(m) }
func (*TableServerTimestamp) ProtoMessage()               {}
func (*TableServerTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TableServerTimestamp) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *TableServerTimestamp) GetServerTimestamp() []*ServerTimestamp {
	if m != nil {
		return m.ServerTimestamp
	}
	return nil
}

// *
// Structure keeps relevant info for backup restore session
type BackupImage struct {
	BackupId         *string                 `protobuf:"bytes,1,opt,name=backup_id,json=backupId" json:"backup_id,omitempty"`
	BackupType       *BackupType             `protobuf:"varint,2,opt,name=backup_type,json=backupType,enum=pb.BackupType" json:"backup_type,omitempty"`
	BackupRootDir    *string                 `protobuf:"bytes,3,opt,name=backup_root_dir,json=backupRootDir" json:"backup_root_dir,omitempty"`
	TableList        []*TableName            `protobuf:"bytes,4,rep,name=table_list,json=tableList" json:"table_list,omitempty"`
	StartTs          *uint64                 `protobuf:"varint,5,opt,name=start_ts,json=startTs" json:"start_ts,omitempty"`
	CompleteTs       *uint64                 `protobuf:"varint,6,opt,name=complete_ts,json=completeTs" json:"complete_ts,omitempty"`
	Ancestors        []*BackupImage          `protobuf:"bytes,7,rep,name=ancestors" json:"ancestors,omitempty"`
	TstMap           []*TableServerTimestamp `protobuf:"bytes,8,rep,name=tst_map,json=tstMap" json:"tst_map,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *BackupImage) Reset()                    { *m = BackupImage{} }
func (m *BackupImage) String() string            { return proto.CompactTextString(m) }
func (*BackupImage) ProtoMessage()               {}
func (*BackupImage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *BackupImage) GetBackupId() string {
	if m != nil && m.BackupId != nil {
		return *m.BackupId
	}
	return ""
}

func (m *BackupImage) GetBackupType() BackupType {
	if m != nil && m.BackupType != nil {
		return *m.BackupType
	}
	return BackupType_FULL
}

func (m *BackupImage) GetBackupRootDir() string {
	if m != nil && m.BackupRootDir != nil {
		return *m.BackupRootDir
	}
	return ""
}

func (m *BackupImage) GetTableList() []*TableName {
	if m != nil {
		return m.TableList
	}
	return nil
}

func (m *BackupImage) GetStartTs() uint64 {
	if m != nil && m.StartTs != nil {
		return *m.StartTs
	}
	return 0
}

func (m *BackupImage) GetCompleteTs() uint64 {
	if m != nil && m.CompleteTs != nil {
		return *m.CompleteTs
	}
	return 0
}

func (m *BackupImage) GetAncestors() []*BackupImage {
	if m != nil {
		return m.Ancestors
	}
	return nil
}

func (m *BackupImage) GetTstMap() []*TableServerTimestamp {
	if m != nil {
		return m.TstMap
	}
	return nil
}

// *
// Internal structure used during backup
type BackupTableInfo struct {
	TableName        *TableName `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	SnapshotName     *string    `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName" json:"snapshot_name,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BackupTableInfo) Reset()                    { *m = BackupTableInfo{} }
func (m *BackupTableInfo) String() string            { return proto.CompactTextString(m) }
func (*BackupTableInfo) ProtoMessage()               {}
func (*BackupTableInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *BackupTableInfo) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *BackupTableInfo) GetSnapshotName() string {
	if m != nil && m.SnapshotName != nil {
		return *m.SnapshotName
	}
	return ""
}

// *
// Backup session information
type BackupInfo struct {
	BackupId         *string                 `protobuf:"bytes,1,opt,name=backup_id,json=backupId" json:"backup_id,omitempty"`
	BackupType       *BackupType             `protobuf:"varint,2,opt,name=backup_type,json=backupType,enum=pb.BackupType" json:"backup_type,omitempty"`
	BackupRootDir    *string                 `protobuf:"bytes,3,opt,name=backup_root_dir,json=backupRootDir" json:"backup_root_dir,omitempty"`
	BackupState      *BackupInfo_BackupState `protobuf:"varint,4,opt,name=backup_state,json=backupState,enum=pb.BackupInfo_BackupState" json:"backup_state,omitempty"`
	BackupPhase      *BackupInfo_BackupPhase `protobuf:"varint,5,opt,name=backup_phase,json=backupPhase,enum=pb.BackupInfo_BackupPhase" json:"backup_phase,omitempty"`
	FailedMessage    *string                 `protobuf:"bytes,6,opt,name=failed_message,json=failedMessage" json:"failed_message,omitempty"`
	BackupTableInfo  []*BackupTableInfo      `protobuf:"bytes,7,rep,name=backup_table_info,json=backupTableInfo" json:"backup_table_info,omitempty"`
	StartTs          *uint64                 `protobuf:"varint,8,opt,name=start_ts,json=startTs" json:"start_ts,omitempty"`
	CompleteTs       *uint64                 `protobuf:"varint,9,opt,name=complete_ts,json=completeTs" json:"complete_ts,omitempty"`
	Progress         *uint32                 `protobuf:"varint,10,opt,name=progress" json:"progress,omitempty"`
	WorkersNumber    *uint32                 `protobuf:"varint,11,opt,name=workers_number,json=workersNumber" json:"workers_number,omitempty"`
	Bandwidth        *uint64                 `protobuf:"varint,12,opt,name=bandwidth" json:"bandwidth,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *BackupInfo) Reset()                    { *m = BackupInfo{} }
func (m *BackupInfo) String() string            { return proto.CompactTextString(m) }
func (*BackupInfo) ProtoMessage()               {}
func (*BackupInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *BackupInfo) GetBackupId() string {
	if m != nil && m.BackupId != nil {
		return *m.BackupId
	}
	return ""
}

func (m *BackupInfo) GetBackupType() BackupType {
	if m != nil && m.BackupType != nil {
		return *m.BackupType
	}
	return BackupType_FULL
}

func (m *BackupInfo) GetBackupRootDir() string {
	if m != nil && m.BackupRootDir != nil {
		return *m.BackupRootDir
	}
	return ""
}

func (m *BackupInfo) GetBackupState() BackupInfo_BackupState {
	if m != nil && m.BackupState != nil {
		return *m.BackupState
	}
	return BackupInfo_RUNNING
}

func (m *BackupInfo) GetBackupPhase() BackupInfo_BackupPhase {
	if m != nil && m.BackupPhase != nil {
		return *m.BackupPhase
	}
	return BackupInfo_REQUEST
}

func (m *BackupInfo) GetFailedMessage() string {
	if m != nil && m.FailedMessage != nil {
		return *m.FailedMessage
	}
	return ""
}

func (m *BackupInfo) GetBackupTableInfo() []*BackupTableInfo {
	if m != nil {
		return m.BackupTableInfo
	}
	return nil
}

func (m *BackupInfo) GetStartTs() uint64 {
	if m != nil && m.StartTs != nil {
		return *m.StartTs
	}
	return 0
}

func (m *BackupInfo) GetCompleteTs() uint64 {
	if m != nil && m.CompleteTs != nil {
		return *m.CompleteTs
	}
	return 0
}

func (m *BackupInfo) GetProgress() uint32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *BackupInfo) GetWorkersNumber() uint32 {
	if m != nil && m.WorkersNumber != nil {
		return *m.WorkersNumber
	}
	return 0
}

func (m *BackupInfo) GetBandwidth() uint64 {
	if m != nil && m.Bandwidth != nil {
		return *m.Bandwidth
	}
	return 0
}

func init() {
	proto.RegisterType((*ServerTimestamp)(nil), "pb.ServerTimestamp")
	proto.RegisterType((*TableServerTimestamp)(nil), "pb.TableServerTimestamp")
	proto.RegisterType((*BackupImage)(nil), "pb.BackupImage")
	proto.RegisterType((*BackupTableInfo)(nil), "pb.BackupTableInfo")
	proto.RegisterType((*BackupInfo)(nil), "pb.BackupInfo")
	proto.RegisterEnum("pb.BackupType", BackupType_name, BackupType_value)
	proto.RegisterEnum("pb.BackupInfo_BackupState", BackupInfo_BackupState_name, BackupInfo_BackupState_value)
	proto.RegisterEnum("pb.BackupInfo_BackupPhase", BackupInfo_BackupPhase_name, BackupInfo_BackupPhase_value)
}

var fileDescriptor2 = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x54, 0x4b, 0x6f, 0xd3, 0x4a,
	0x14, 0xbe, 0x4e, 0xd2, 0x26, 0x39, 0xce, 0xeb, 0x4e, 0x2b, 0x5d, 0xdf, 0xde, 0x2b, 0x81, 0x82,
	0x78, 0x08, 0x41, 0x50, 0xd9, 0x03, 0x4a, 0x52, 0x97, 0x5a, 0x4a, 0x9c, 0xe0, 0xb8, 0x0b, 0x56,
	0x66, 0x1c, 0x4f, 0x13, 0xab, 0x49, 0x6c, 0x79, 0xa6, 0x54, 0x2c, 0xd8, 0xb1, 0xe0, 0x67, 0xf0,
	0x77, 0x58, 0xf1, 0x97, 0x38, 0x33, 0xb6, 0x13, 0x53, 0x1e, 0x12, 0x2b, 0x76, 0x3e, 0xdf, 0xf9,
	0xce, 0xeb, 0x3b, 0xe3, 0x03, 0x8d, 0x01, 0x9d, 0x5f, 0x5e, 0xc5, 0xbd, 0x38, 0x89, 0x44, 0x44,
	0x4a, 0xb1, 0x7f, 0xa4, 0x9f, 0x0d, 0x28, 0x67, 0x29, 0xd0, 0x7d, 0x03, 0xed, 0x19, 0x4b, 0xde,
	0xb2, 0xc4, 0x0d, 0xd7, 0x8c, 0x0b, 0xba, 0x8e, 0xc9, 0x13, 0xd0, 0xb9, 0x82, 0xbc, 0x0d, 0x5d,
	0x33, 0x43, 0xbb, 0xad, 0x3d, 0xd0, 0x9f, 0xb6, 0x7a, 0xb1, 0xdf, 0x4b, 0x99, 0x36, 0xa2, 0x0e,
	0xf0, 0xed, 0x37, 0xf9, 0x1f, 0xea, 0x22, 0x8f, 0x36, 0x4a, 0x48, 0xaf, 0x38, 0x3b, 0xa0, 0xfb,
	0x41, 0x83, 0x43, 0x97, 0xfa, 0x2b, 0x76, 0xb3, 0xce, 0x23, 0x00, 0x21, 0xf1, 0x62, 0x99, 0xa6,
	0x2c, 0xa3, 0xd8, 0xaa, 0x4a, 0x5d, 0xe4, 0x9f, 0xe4, 0x39, 0x74, 0xb2, 0xae, 0x8a, 0xb5, 0xca,
	0x18, 0x73, 0xb0, 0x6b, 0x6d, 0x9b, 0xdc, 0x69, 0xf3, 0x6f, 0x81, 0xee, 0x97, 0x12, 0xe8, 0xa9,
	0x14, 0xd6, 0x9a, 0x2e, 0x18, 0xf9, 0x0f, 0xea, 0xbe, 0x32, 0xbd, 0x30, 0x50, 0xc5, 0xeb, 0x4e,
	0x2d, 0x05, 0xac, 0x40, 0x4a, 0x90, 0x39, 0xc5, 0xbb, 0x98, 0xa9, 0x99, 0x5a, 0xa9, 0x04, 0x69,
	0x0a, 0x17, 0x51, 0x07, 0xfc, 0xed, 0x37, 0xb9, 0x07, 0xed, 0x2c, 0x20, 0x89, 0x22, 0xe1, 0x05,
	0x61, 0x62, 0x94, 0x55, 0xce, 0x66, 0x0a, 0x3b, 0x88, 0x9e, 0x84, 0xc9, 0x6e, 0xe6, 0x55, 0xc8,
	0x85, 0x51, 0x51, 0xfd, 0xff, 0x70, 0xe6, 0x11, 0xfa, 0xc9, 0xbf, 0x50, 0xc3, 0xe6, 0x13, 0xe1,
	0x09, 0x6e, 0xec, 0x29, 0x5d, 0xab, 0xca, 0x76, 0x39, 0xb9, 0x05, 0xfa, 0x3c, 0x5a, 0xc7, 0x2b,
	0x26, 0x98, 0xf4, 0xee, 0x2b, 0x2f, 0xe4, 0x10, 0x12, 0x1e, 0x43, 0x9d, 0x6e, 0xe6, 0x38, 0x7c,
	0x94, 0x70, 0xa3, 0xaa, 0x0a, 0xb5, 0x77, 0x03, 0x28, 0x0d, 0x9c, 0x1d, 0x83, 0x1c, 0x43, 0x55,
	0x70, 0xe1, 0xad, 0x69, 0x6c, 0xd4, 0x14, 0xd9, 0xd8, 0x76, 0x75, 0x53, 0xda, 0x7d, 0x24, 0x8e,
	0x69, 0xdc, 0x0d, 0xa0, 0x9d, 0xa9, 0x21, 0x59, 0xd6, 0xe6, 0x22, 0xfa, 0xcd, 0x95, 0xde, 0x81,
	0x26, 0xdf, 0xd0, 0x98, 0x2f, 0x51, 0x31, 0x15, 0x50, 0x52, 0x92, 0x35, 0x72, 0x50, 0x92, 0xba,
	0x9f, 0xf7, 0x00, 0xb2, 0x9e, 0x65, 0x85, 0x3f, 0xb3, 0xb6, 0x67, 0xd0, 0xc8, 0x78, 0x28, 0x81,
	0x60, 0xb8, 0x38, 0x99, 0xf9, 0xa8, 0xa0, 0x27, 0xf6, 0x96, 0x7d, 0xce, 0x24, 0xc3, 0xc9, 0x1a,
	0x51, 0x46, 0x21, 0x3c, 0x5e, 0xe2, 0xaf, 0xa7, 0x76, 0xf9, 0xb3, 0xf0, 0xa9, 0x64, 0xe4, 0xe1,
	0xca, 0x20, 0x77, 0xa1, 0x75, 0x41, 0xc3, 0x15, 0x0b, 0x3c, 0x5c, 0x01, 0xc7, 0xc5, 0xa9, 0x75,
	0x63, 0x93, 0x29, 0x3a, 0x4e, 0x41, 0xf2, 0x02, 0xfe, 0xce, 0xa7, 0x57, 0x3b, 0x08, 0x31, 0x69,
	0xb6, 0xf9, 0x83, 0x82, 0x06, 0xf9, 0xb2, 0x9c, 0x6c, 0xf4, 0xdd, 0xf6, 0x8a, 0xcf, 0xad, 0xf6,
	0xcb, 0xe7, 0x56, 0xff, 0xee, 0xb9, 0x1d, 0x41, 0x0d, 0x0f, 0xca, 0x22, 0xc1, 0x5e, 0x0c, 0x40,
	0x6f, 0xd3, 0xd9, 0xda, 0xb2, 0xff, 0xeb, 0x28, 0xb9, 0x64, 0x09, 0xf7, 0x36, 0x57, 0x6b, 0x9f,
	0x25, 0x86, 0xae, 0x18, 0xcd, 0x0c, 0xb5, 0x15, 0x28, 0xcf, 0x88, 0x4f, 0x37, 0xc1, 0x75, 0x18,
	0x88, 0xa5, 0xd1, 0x48, 0xcf, 0xc8, 0x16, 0xe8, 0x0e, 0xf3, 0xdf, 0x37, 0x95, 0x54, 0x87, 0xaa,
	0x73, 0x6e, 0xdb, 0x96, 0xfd, 0xb2, 0xf3, 0x17, 0x69, 0x40, 0x6d, 0x38, 0x19, 0x4f, 0x47, 0xa6,
	0x6b, 0x76, 0x34, 0x02, 0xb0, 0x7f, 0xda, 0xb7, 0x46, 0xe6, 0x49, 0xa7, 0x44, 0x9a, 0x50, 0x1f,
	0xf6, 0xed, 0xa1, 0x39, 0x92, 0x66, 0xb9, 0xfb, 0x3e, 0x4f, 0x92, 0x0a, 0x2b, 0x93, 0x98, 0xaf,
	0xce, 0xcd, 0x99, 0x9b, 0x26, 0x99, 0xd9, 0xfd, 0xe9, 0xec, 0x6c, 0xe2, 0x62, 0x92, 0x7f, 0xe0,
	0x60, 0xea, 0x98, 0xd3, 0xbe, 0x63, 0x7a, 0x96, 0x3d, 0x74, 0xcc, 0xb1, 0x69, 0xbb, 0xfd, 0x11,
	0x66, 0xec, 0x40, 0x23, 0xa7, 0x0d, 0x27, 0xd3, 0xd7, 0x9d, 0x32, 0x39, 0x84, 0x4e, 0x81, 0xe2,
	0x29, 0xb4, 0x42, 0x08, 0xb4, 0x66, 0xee, 0x04, 0xc3, 0xc7, 0x7d, 0xdb, 0x3a, 0x95, 0x25, 0xf6,
	0x1e, 0xde, 0xcf, 0x9f, 0xb2, 0x7a, 0x7c, 0x35, 0xa8, 0x9c, 0x9e, 0x8f, 0x46, 0x58, 0xba, 0x0d,
	0x7a, 0xb1, 0x88, 0x36, 0xb0, 0xe0, 0x38, 0x4a, 0x16, 0x3d, 0x1a, 0xd3, 0xf9, 0x92, 0xf5, 0x96,
	0x34, 0x88, 0xa2, 0xb8, 0xb7, 0xf4, 0xe5, 0xd9, 0xe6, 0x68, 0xb1, 0x20, 0xbd, 0xde, 0xfe, 0xd5,
	0x45, 0x6f, 0xc1, 0x36, 0x2c, 0x41, 0x45, 0x82, 0x41, 0x76, 0xe9, 0xa7, 0xd2, 0xc3, 0xcf, 0xb4,
	0x8f, 0x9a, 0xf6, 0x49, 0xd3, 0xbe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x37, 0x80, 0x4e, 0x00,
	0x06, 0x00, 0x00,
}
