// Code generated by protoc-gen-go.
// source: Admin.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetRegionInfoResponse_CompactionState int32

const (
	GetRegionInfoResponse_NONE            GetRegionInfoResponse_CompactionState = 0
	GetRegionInfoResponse_MINOR           GetRegionInfoResponse_CompactionState = 1
	GetRegionInfoResponse_MAJOR           GetRegionInfoResponse_CompactionState = 2
	GetRegionInfoResponse_MAJOR_AND_MINOR GetRegionInfoResponse_CompactionState = 3
)

var GetRegionInfoResponse_CompactionState_name = map[int32]string{
	0: "NONE",
	1: "MINOR",
	2: "MAJOR",
	3: "MAJOR_AND_MINOR",
}
var GetRegionInfoResponse_CompactionState_value = map[string]int32{
	"NONE":            0,
	"MINOR":           1,
	"MAJOR":           2,
	"MAJOR_AND_MINOR": 3,
}

func (x GetRegionInfoResponse_CompactionState) Enum() *GetRegionInfoResponse_CompactionState {
	p := new(GetRegionInfoResponse_CompactionState)
	*p = x
	return p
}
func (x GetRegionInfoResponse_CompactionState) String() string {
	return proto.EnumName(GetRegionInfoResponse_CompactionState_name, int32(x))
}
func (x *GetRegionInfoResponse_CompactionState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GetRegionInfoResponse_CompactionState_value, data, "GetRegionInfoResponse_CompactionState")
	if err != nil {
		return err
	}
	*x = GetRegionInfoResponse_CompactionState(value)
	return nil
}
func (GetRegionInfoResponse_CompactionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0}
}

type OpenRegionResponse_RegionOpeningState int32

const (
	OpenRegionResponse_OPENED         OpenRegionResponse_RegionOpeningState = 0
	OpenRegionResponse_ALREADY_OPENED OpenRegionResponse_RegionOpeningState = 1
	OpenRegionResponse_FAILED_OPENING OpenRegionResponse_RegionOpeningState = 2
)

var OpenRegionResponse_RegionOpeningState_name = map[int32]string{
	0: "OPENED",
	1: "ALREADY_OPENED",
	2: "FAILED_OPENING",
}
var OpenRegionResponse_RegionOpeningState_value = map[string]int32{
	"OPENED":         0,
	"ALREADY_OPENED": 1,
	"FAILED_OPENING": 2,
}

func (x OpenRegionResponse_RegionOpeningState) Enum() *OpenRegionResponse_RegionOpeningState {
	p := new(OpenRegionResponse_RegionOpeningState)
	*p = x
	return p
}
func (x OpenRegionResponse_RegionOpeningState) String() string {
	return proto.EnumName(OpenRegionResponse_RegionOpeningState_name, int32(x))
}
func (x *OpenRegionResponse_RegionOpeningState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OpenRegionResponse_RegionOpeningState_value, data, "OpenRegionResponse_RegionOpeningState")
	if err != nil {
		return err
	}
	*x = OpenRegionResponse_RegionOpeningState(value)
	return nil
}
func (OpenRegionResponse_RegionOpeningState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{7, 0}
}

type GetRegionInfoRequest struct {
	Region           *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	CompactionState  *bool            `protobuf:"varint,2,opt,name=compaction_state,json=compactionState" json:"compaction_state,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *GetRegionInfoRequest) Reset()                    { *m = GetRegionInfoRequest{} }
func (m *GetRegionInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRegionInfoRequest) ProtoMessage()               {}
func (*GetRegionInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetRegionInfoRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *GetRegionInfoRequest) GetCompactionState() bool {
	if m != nil && m.CompactionState != nil {
		return *m.CompactionState
	}
	return false
}

type GetRegionInfoResponse struct {
	RegionInfo       *RegionInfo                            `protobuf:"bytes,1,req,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	CompactionState  *GetRegionInfoResponse_CompactionState `protobuf:"varint,2,opt,name=compaction_state,json=compactionState,enum=pb.GetRegionInfoResponse_CompactionState" json:"compaction_state,omitempty"`
	IsRecovering     *bool                                  `protobuf:"varint,3,opt,name=isRecovering" json:"isRecovering,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *GetRegionInfoResponse) Reset()                    { *m = GetRegionInfoResponse{} }
func (m *GetRegionInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRegionInfoResponse) ProtoMessage()               {}
func (*GetRegionInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetRegionInfoResponse) GetRegionInfo() *RegionInfo {
	if m != nil {
		return m.RegionInfo
	}
	return nil
}

func (m *GetRegionInfoResponse) GetCompactionState() GetRegionInfoResponse_CompactionState {
	if m != nil && m.CompactionState != nil {
		return *m.CompactionState
	}
	return GetRegionInfoResponse_NONE
}

func (m *GetRegionInfoResponse) GetIsRecovering() bool {
	if m != nil && m.IsRecovering != nil {
		return *m.IsRecovering
	}
	return false
}

// *
// Get a list of store files for a set of column families in a particular region.
// If no column family is specified, get the store files for all column families.
type GetStoreFileRequest struct {
	Region           *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Family           [][]byte         `protobuf:"bytes,2,rep,name=family" json:"family,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *GetStoreFileRequest) Reset()                    { *m = GetStoreFileRequest{} }
func (m *GetStoreFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStoreFileRequest) ProtoMessage()               {}
func (*GetStoreFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetStoreFileRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *GetStoreFileRequest) GetFamily() [][]byte {
	if m != nil {
		return m.Family
	}
	return nil
}

type GetStoreFileResponse struct {
	StoreFile        []string `protobuf:"bytes,1,rep,name=store_file,json=storeFile" json:"store_file,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetStoreFileResponse) Reset()                    { *m = GetStoreFileResponse{} }
func (m *GetStoreFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetStoreFileResponse) ProtoMessage()               {}
func (*GetStoreFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetStoreFileResponse) GetStoreFile() []string {
	if m != nil {
		return m.StoreFile
	}
	return nil
}

type GetOnlineRegionRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetOnlineRegionRequest) Reset()                    { *m = GetOnlineRegionRequest{} }
func (m *GetOnlineRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOnlineRegionRequest) ProtoMessage()               {}
func (*GetOnlineRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type GetOnlineRegionResponse struct {
	RegionInfo       []*RegionInfo `protobuf:"bytes,1,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetOnlineRegionResponse) Reset()                    { *m = GetOnlineRegionResponse{} }
func (m *GetOnlineRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetOnlineRegionResponse) ProtoMessage()               {}
func (*GetOnlineRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GetOnlineRegionResponse) GetRegionInfo() []*RegionInfo {
	if m != nil {
		return m.RegionInfo
	}
	return nil
}

type OpenRegionRequest struct {
	OpenInfo []*OpenRegionRequest_RegionOpenInfo `protobuf:"bytes,1,rep,name=open_info,json=openInfo" json:"open_info,omitempty"`
	// the intended server for this RPC.
	ServerStartCode *uint64 `protobuf:"varint,2,opt,name=serverStartCode" json:"serverStartCode,omitempty"`
	// wall clock time from master
	MasterSystemTime *uint64 `protobuf:"varint,5,opt,name=master_system_time,json=masterSystemTime" json:"master_system_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OpenRegionRequest) Reset()                    { *m = OpenRegionRequest{} }
func (m *OpenRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenRegionRequest) ProtoMessage()               {}
func (*OpenRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *OpenRegionRequest) GetOpenInfo() []*OpenRegionRequest_RegionOpenInfo {
	if m != nil {
		return m.OpenInfo
	}
	return nil
}

func (m *OpenRegionRequest) GetServerStartCode() uint64 {
	if m != nil && m.ServerStartCode != nil {
		return *m.ServerStartCode
	}
	return 0
}

func (m *OpenRegionRequest) GetMasterSystemTime() uint64 {
	if m != nil && m.MasterSystemTime != nil {
		return *m.MasterSystemTime
	}
	return 0
}

type OpenRegionRequest_RegionOpenInfo struct {
	Region               *RegionInfo   `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	VersionOfOfflineNode *uint32       `protobuf:"varint,2,opt,name=version_of_offline_node,json=versionOfOfflineNode" json:"version_of_offline_node,omitempty"`
	FavoredNodes         []*ServerName `protobuf:"bytes,3,rep,name=favored_nodes,json=favoredNodes" json:"favored_nodes,omitempty"`
	// open region for distributedLogReplay
	OpenForDistributedLogReplay *bool  `protobuf:"varint,4,opt,name=openForDistributedLogReplay" json:"openForDistributedLogReplay,omitempty"`
	XXX_unrecognized            []byte `json:"-"`
}

func (m *OpenRegionRequest_RegionOpenInfo) Reset()         { *m = OpenRegionRequest_RegionOpenInfo{} }
func (m *OpenRegionRequest_RegionOpenInfo) String() string { return proto.CompactTextString(m) }
func (*OpenRegionRequest_RegionOpenInfo) ProtoMessage()    {}
func (*OpenRegionRequest_RegionOpenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{6, 0}
}

func (m *OpenRegionRequest_RegionOpenInfo) GetRegion() *RegionInfo {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *OpenRegionRequest_RegionOpenInfo) GetVersionOfOfflineNode() uint32 {
	if m != nil && m.VersionOfOfflineNode != nil {
		return *m.VersionOfOfflineNode
	}
	return 0
}

func (m *OpenRegionRequest_RegionOpenInfo) GetFavoredNodes() []*ServerName {
	if m != nil {
		return m.FavoredNodes
	}
	return nil
}

func (m *OpenRegionRequest_RegionOpenInfo) GetOpenForDistributedLogReplay() bool {
	if m != nil && m.OpenForDistributedLogReplay != nil {
		return *m.OpenForDistributedLogReplay
	}
	return false
}

type OpenRegionResponse struct {
	OpeningState     []OpenRegionResponse_RegionOpeningState `protobuf:"varint,1,rep,name=opening_state,json=openingState,enum=pb.OpenRegionResponse_RegionOpeningState" json:"opening_state,omitempty"`
	XXX_unrecognized []byte                                  `json:"-"`
}

func (m *OpenRegionResponse) Reset()                    { *m = OpenRegionResponse{} }
func (m *OpenRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenRegionResponse) ProtoMessage()               {}
func (*OpenRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *OpenRegionResponse) GetOpeningState() []OpenRegionResponse_RegionOpeningState {
	if m != nil {
		return m.OpeningState
	}
	return nil
}

type WarmupRegionRequest struct {
	RegionInfo       *RegionInfo `protobuf:"bytes,1,req,name=regionInfo" json:"regionInfo,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *WarmupRegionRequest) Reset()                    { *m = WarmupRegionRequest{} }
func (m *WarmupRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*WarmupRegionRequest) ProtoMessage()               {}
func (*WarmupRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *WarmupRegionRequest) GetRegionInfo() *RegionInfo {
	if m != nil {
		return m.RegionInfo
	}
	return nil
}

type WarmupRegionResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *WarmupRegionResponse) Reset()                    { *m = WarmupRegionResponse{} }
func (m *WarmupRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*WarmupRegionResponse) ProtoMessage()               {}
func (*WarmupRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

// *
// Closes the specified region and will use or not use ZK during the close
// according to the specified flag.
type CloseRegionRequest struct {
	Region               *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	VersionOfClosingNode *uint32          `protobuf:"varint,2,opt,name=version_of_closing_node,json=versionOfClosingNode" json:"version_of_closing_node,omitempty"`
	TransitionIn_ZK      *bool            `protobuf:"varint,3,opt,name=transition_in_ZK,json=transitionInZK,def=1" json:"transition_in_ZK,omitempty"`
	DestinationServer    *ServerName      `protobuf:"bytes,4,opt,name=destination_server,json=destinationServer" json:"destination_server,omitempty"`
	// the intended server for this RPC.
	ServerStartCode  *uint64 `protobuf:"varint,5,opt,name=serverStartCode" json:"serverStartCode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CloseRegionRequest) Reset()                    { *m = CloseRegionRequest{} }
func (m *CloseRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseRegionRequest) ProtoMessage()               {}
func (*CloseRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

const Default_CloseRegionRequest_TransitionIn_ZK bool = true

func (m *CloseRegionRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *CloseRegionRequest) GetVersionOfClosingNode() uint32 {
	if m != nil && m.VersionOfClosingNode != nil {
		return *m.VersionOfClosingNode
	}
	return 0
}

func (m *CloseRegionRequest) GetTransitionIn_ZK() bool {
	if m != nil && m.TransitionIn_ZK != nil {
		return *m.TransitionIn_ZK
	}
	return Default_CloseRegionRequest_TransitionIn_ZK
}

func (m *CloseRegionRequest) GetDestinationServer() *ServerName {
	if m != nil {
		return m.DestinationServer
	}
	return nil
}

func (m *CloseRegionRequest) GetServerStartCode() uint64 {
	if m != nil && m.ServerStartCode != nil {
		return *m.ServerStartCode
	}
	return 0
}

type CloseRegionResponse struct {
	Closed           *bool  `protobuf:"varint,1,req,name=closed" json:"closed,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CloseRegionResponse) Reset()                    { *m = CloseRegionResponse{} }
func (m *CloseRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseRegionResponse) ProtoMessage()               {}
func (*CloseRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *CloseRegionResponse) GetClosed() bool {
	if m != nil && m.Closed != nil {
		return *m.Closed
	}
	return false
}

// *
// Flushes the MemStore of the specified region.
// <p>
// This method is synchronous.
type FlushRegionRequest struct {
	Region              *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	IfOlderThanTs       *uint64          `protobuf:"varint,2,opt,name=if_older_than_ts,json=ifOlderThanTs" json:"if_older_than_ts,omitempty"`
	WriteFlushWalMarker *bool            `protobuf:"varint,3,opt,name=write_flush_wal_marker,json=writeFlushWalMarker" json:"write_flush_wal_marker,omitempty"`
	XXX_unrecognized    []byte           `json:"-"`
}

func (m *FlushRegionRequest) Reset()                    { *m = FlushRegionRequest{} }
func (m *FlushRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*FlushRegionRequest) ProtoMessage()               {}
func (*FlushRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *FlushRegionRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *FlushRegionRequest) GetIfOlderThanTs() uint64 {
	if m != nil && m.IfOlderThanTs != nil {
		return *m.IfOlderThanTs
	}
	return 0
}

func (m *FlushRegionRequest) GetWriteFlushWalMarker() bool {
	if m != nil && m.WriteFlushWalMarker != nil {
		return *m.WriteFlushWalMarker
	}
	return false
}

type FlushRegionResponse struct {
	LastFlushTime       *uint64 `protobuf:"varint,1,req,name=last_flush_time,json=lastFlushTime" json:"last_flush_time,omitempty"`
	Flushed             *bool   `protobuf:"varint,2,opt,name=flushed" json:"flushed,omitempty"`
	WroteFlushWalMarker *bool   `protobuf:"varint,3,opt,name=wrote_flush_wal_marker,json=wroteFlushWalMarker" json:"wrote_flush_wal_marker,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *FlushRegionResponse) Reset()                    { *m = FlushRegionResponse{} }
func (m *FlushRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*FlushRegionResponse) ProtoMessage()               {}
func (*FlushRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *FlushRegionResponse) GetLastFlushTime() uint64 {
	if m != nil && m.LastFlushTime != nil {
		return *m.LastFlushTime
	}
	return 0
}

func (m *FlushRegionResponse) GetFlushed() bool {
	if m != nil && m.Flushed != nil {
		return *m.Flushed
	}
	return false
}

func (m *FlushRegionResponse) GetWroteFlushWalMarker() bool {
	if m != nil && m.WroteFlushWalMarker != nil {
		return *m.WroteFlushWalMarker
	}
	return false
}

// *
// Splits the specified region.
// <p>
// This method currently flushes the region and then forces a compaction which
// will then trigger a split.  The flush is done synchronously but the
// compaction is asynchronous.
type SplitRegionRequest struct {
	Region           *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	SplitPoint       []byte           `protobuf:"bytes,2,opt,name=split_point,json=splitPoint" json:"split_point,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SplitRegionRequest) Reset()                    { *m = SplitRegionRequest{} }
func (m *SplitRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*SplitRegionRequest) ProtoMessage()               {}
func (*SplitRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *SplitRegionRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *SplitRegionRequest) GetSplitPoint() []byte {
	if m != nil {
		return m.SplitPoint
	}
	return nil
}

type SplitRegionResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SplitRegionResponse) Reset()                    { *m = SplitRegionResponse{} }
func (m *SplitRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*SplitRegionResponse) ProtoMessage()               {}
func (*SplitRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

// *
// Compacts the specified region.  Performs a major compaction if specified.
// <p>
// This method is asynchronous.
type CompactRegionRequest struct {
	Region           *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Major            *bool            `protobuf:"varint,2,opt,name=major" json:"major,omitempty"`
	Family           []byte           `protobuf:"bytes,3,opt,name=family" json:"family,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CompactRegionRequest) Reset()                    { *m = CompactRegionRequest{} }
func (m *CompactRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*CompactRegionRequest) ProtoMessage()               {}
func (*CompactRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *CompactRegionRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *CompactRegionRequest) GetMajor() bool {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return false
}

func (m *CompactRegionRequest) GetFamily() []byte {
	if m != nil {
		return m.Family
	}
	return nil
}

type CompactRegionResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CompactRegionResponse) Reset()                    { *m = CompactRegionResponse{} }
func (m *CompactRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*CompactRegionResponse) ProtoMessage()               {}
func (*CompactRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

type UpdateFavoredNodesRequest struct {
	UpdateInfo       []*UpdateFavoredNodesRequest_RegionUpdateInfo `protobuf:"bytes,1,rep,name=update_info,json=updateInfo" json:"update_info,omitempty"`
	XXX_unrecognized []byte                                        `json:"-"`
}

func (m *UpdateFavoredNodesRequest) Reset()                    { *m = UpdateFavoredNodesRequest{} }
func (m *UpdateFavoredNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateFavoredNodesRequest) ProtoMessage()               {}
func (*UpdateFavoredNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *UpdateFavoredNodesRequest) GetUpdateInfo() []*UpdateFavoredNodesRequest_RegionUpdateInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

type UpdateFavoredNodesRequest_RegionUpdateInfo struct {
	Region           *RegionInfo   `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	FavoredNodes     []*ServerName `protobuf:"bytes,2,rep,name=favored_nodes,json=favoredNodes" json:"favored_nodes,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *UpdateFavoredNodesRequest_RegionUpdateInfo) Reset() {
	*m = UpdateFavoredNodesRequest_RegionUpdateInfo{}
}
func (m *UpdateFavoredNodesRequest_RegionUpdateInfo) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateFavoredNodesRequest_RegionUpdateInfo) ProtoMessage() {}
func (*UpdateFavoredNodesRequest_RegionUpdateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{18, 0}
}

func (m *UpdateFavoredNodesRequest_RegionUpdateInfo) GetRegion() *RegionInfo {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *UpdateFavoredNodesRequest_RegionUpdateInfo) GetFavoredNodes() []*ServerName {
	if m != nil {
		return m.FavoredNodes
	}
	return nil
}

type UpdateFavoredNodesResponse struct {
	Response         *uint32 `protobuf:"varint,1,opt,name=response" json:"response,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UpdateFavoredNodesResponse) Reset()                    { *m = UpdateFavoredNodesResponse{} }
func (m *UpdateFavoredNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateFavoredNodesResponse) ProtoMessage()               {}
func (*UpdateFavoredNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *UpdateFavoredNodesResponse) GetResponse() uint32 {
	if m != nil && m.Response != nil {
		return *m.Response
	}
	return 0
}

// *
// Merges the specified regions.
// <p>
// This method currently closes the regions and then merges them
type MergeRegionsRequest struct {
	RegionA  *RegionSpecifier `protobuf:"bytes,1,req,name=region_a,json=regionA" json:"region_a,omitempty"`
	RegionB  *RegionSpecifier `protobuf:"bytes,2,req,name=region_b,json=regionB" json:"region_b,omitempty"`
	Forcible *bool            `protobuf:"varint,3,opt,name=forcible,def=0" json:"forcible,omitempty"`
	// wall clock time from master
	MasterSystemTime *uint64 `protobuf:"varint,4,opt,name=master_system_time,json=masterSystemTime" json:"master_system_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MergeRegionsRequest) Reset()                    { *m = MergeRegionsRequest{} }
func (m *MergeRegionsRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRegionsRequest) ProtoMessage()               {}
func (*MergeRegionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

const Default_MergeRegionsRequest_Forcible bool = false

func (m *MergeRegionsRequest) GetRegionA() *RegionSpecifier {
	if m != nil {
		return m.RegionA
	}
	return nil
}

func (m *MergeRegionsRequest) GetRegionB() *RegionSpecifier {
	if m != nil {
		return m.RegionB
	}
	return nil
}

func (m *MergeRegionsRequest) GetForcible() bool {
	if m != nil && m.Forcible != nil {
		return *m.Forcible
	}
	return Default_MergeRegionsRequest_Forcible
}

func (m *MergeRegionsRequest) GetMasterSystemTime() uint64 {
	if m != nil && m.MasterSystemTime != nil {
		return *m.MasterSystemTime
	}
	return 0
}

type MergeRegionsResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *MergeRegionsResponse) Reset()                    { *m = MergeRegionsResponse{} }
func (m *MergeRegionsResponse) String() string            { return proto.CompactTextString(m) }
func (*MergeRegionsResponse) ProtoMessage()               {}
func (*MergeRegionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

// Protocol buffer version of WAL for replication
type WALEntry struct {
	Key *WALKey `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	// Following may be null if the KVs/Cells are carried along the side in a cellblock (See
	// RPC for more on cellblocks). If Cells/KVs are in a cellblock, this next field is null
	// and associated_cell_count has count of Cells associated w/ this WALEntry
	KeyValueBytes [][]byte `protobuf:"bytes,2,rep,name=key_value_bytes,json=keyValueBytes" json:"key_value_bytes,omitempty"`
	// If Cell data is carried alongside in a cellblock, this is count of Cells in the cellblock.
	AssociatedCellCount *int32 `protobuf:"varint,3,opt,name=associated_cell_count,json=associatedCellCount" json:"associated_cell_count,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *WALEntry) Reset()                    { *m = WALEntry{} }
func (m *WALEntry) String() string            { return proto.CompactTextString(m) }
func (*WALEntry) ProtoMessage()               {}
func (*WALEntry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *WALEntry) GetKey() *WALKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *WALEntry) GetKeyValueBytes() [][]byte {
	if m != nil {
		return m.KeyValueBytes
	}
	return nil
}

func (m *WALEntry) GetAssociatedCellCount() int32 {
	if m != nil && m.AssociatedCellCount != nil {
		return *m.AssociatedCellCount
	}
	return 0
}

// *
// Replicates the given entries. The guarantee is that the given entries
// will be durable on the slave cluster if this method returns without
// any exception.  hbase.replication has to be set to true for this to work.
type ReplicateWALEntryRequest struct {
	Entry            []*WALEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ReplicateWALEntryRequest) Reset()                    { *m = ReplicateWALEntryRequest{} }
func (m *ReplicateWALEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplicateWALEntryRequest) ProtoMessage()               {}
func (*ReplicateWALEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *ReplicateWALEntryRequest) GetEntry() []*WALEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type ReplicateWALEntryResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReplicateWALEntryResponse) Reset()                    { *m = ReplicateWALEntryResponse{} }
func (m *ReplicateWALEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*ReplicateWALEntryResponse) ProtoMessage()               {}
func (*ReplicateWALEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

type RollWALWriterRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RollWALWriterRequest) Reset()                    { *m = RollWALWriterRequest{} }
func (m *RollWALWriterRequest) String() string            { return proto.CompactTextString(m) }
func (*RollWALWriterRequest) ProtoMessage()               {}
func (*RollWALWriterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

//
// Roll request responses no longer include regions to flush
// this list will always be empty when talking to a 1.0 server
type RollWALWriterResponse struct {
	// A list of encoded name of regions to flush
	RegionToFlush    [][]byte `protobuf:"bytes,1,rep,name=region_to_flush,json=regionToFlush" json:"region_to_flush,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RollWALWriterResponse) Reset()                    { *m = RollWALWriterResponse{} }
func (m *RollWALWriterResponse) String() string            { return proto.CompactTextString(m) }
func (*RollWALWriterResponse) ProtoMessage()               {}
func (*RollWALWriterResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *RollWALWriterResponse) GetRegionToFlush() [][]byte {
	if m != nil {
		return m.RegionToFlush
	}
	return nil
}

type StopServerRequest struct {
	Reason           *string `protobuf:"bytes,1,req,name=reason" json:"reason,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StopServerRequest) Reset()                    { *m = StopServerRequest{} }
func (m *StopServerRequest) String() string            { return proto.CompactTextString(m) }
func (*StopServerRequest) ProtoMessage()               {}
func (*StopServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *StopServerRequest) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type StopServerResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StopServerResponse) Reset()                    { *m = StopServerResponse{} }
func (m *StopServerResponse) String() string            { return proto.CompactTextString(m) }
func (*StopServerResponse) ProtoMessage()               {}
func (*StopServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

type GetServerInfoRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetServerInfoRequest) Reset()                    { *m = GetServerInfoRequest{} }
func (m *GetServerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServerInfoRequest) ProtoMessage()               {}
func (*GetServerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

type ServerInfo struct {
	ServerName       *ServerName `protobuf:"bytes,1,req,name=server_name,json=serverName" json:"server_name,omitempty"`
	WebuiPort        *uint32     `protobuf:"varint,2,opt,name=webui_port,json=webuiPort" json:"webui_port,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ServerInfo) Reset()                    { *m = ServerInfo{} }
func (m *ServerInfo) String() string            { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()               {}
func (*ServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *ServerInfo) GetServerName() *ServerName {
	if m != nil {
		return m.ServerName
	}
	return nil
}

func (m *ServerInfo) GetWebuiPort() uint32 {
	if m != nil && m.WebuiPort != nil {
		return *m.WebuiPort
	}
	return 0
}

type GetServerInfoResponse struct {
	ServerInfo       *ServerInfo `protobuf:"bytes,1,req,name=server_info,json=serverInfo" json:"server_info,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *GetServerInfoResponse) Reset()                    { *m = GetServerInfoResponse{} }
func (m *GetServerInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServerInfoResponse) ProtoMessage()               {}
func (*GetServerInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *GetServerInfoResponse) GetServerInfo() *ServerInfo {
	if m != nil {
		return m.ServerInfo
	}
	return nil
}

type UpdateConfigurationRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *UpdateConfigurationRequest) Reset()                    { *m = UpdateConfigurationRequest{} }
func (m *UpdateConfigurationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigurationRequest) ProtoMessage()               {}
func (*UpdateConfigurationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

type UpdateConfigurationResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *UpdateConfigurationResponse) Reset()                    { *m = UpdateConfigurationResponse{} }
func (m *UpdateConfigurationResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigurationResponse) ProtoMessage()               {}
func (*UpdateConfigurationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func init() {
	proto.RegisterType((*GetRegionInfoRequest)(nil), "pb.GetRegionInfoRequest")
	proto.RegisterType((*GetRegionInfoResponse)(nil), "pb.GetRegionInfoResponse")
	proto.RegisterType((*GetStoreFileRequest)(nil), "pb.GetStoreFileRequest")
	proto.RegisterType((*GetStoreFileResponse)(nil), "pb.GetStoreFileResponse")
	proto.RegisterType((*GetOnlineRegionRequest)(nil), "pb.GetOnlineRegionRequest")
	proto.RegisterType((*GetOnlineRegionResponse)(nil), "pb.GetOnlineRegionResponse")
	proto.RegisterType((*OpenRegionRequest)(nil), "pb.OpenRegionRequest")
	proto.RegisterType((*OpenRegionRequest_RegionOpenInfo)(nil), "pb.OpenRegionRequest.RegionOpenInfo")
	proto.RegisterType((*OpenRegionResponse)(nil), "pb.OpenRegionResponse")
	proto.RegisterType((*WarmupRegionRequest)(nil), "pb.WarmupRegionRequest")
	proto.RegisterType((*WarmupRegionResponse)(nil), "pb.WarmupRegionResponse")
	proto.RegisterType((*CloseRegionRequest)(nil), "pb.CloseRegionRequest")
	proto.RegisterType((*CloseRegionResponse)(nil), "pb.CloseRegionResponse")
	proto.RegisterType((*FlushRegionRequest)(nil), "pb.FlushRegionRequest")
	proto.RegisterType((*FlushRegionResponse)(nil), "pb.FlushRegionResponse")
	proto.RegisterType((*SplitRegionRequest)(nil), "pb.SplitRegionRequest")
	proto.RegisterType((*SplitRegionResponse)(nil), "pb.SplitRegionResponse")
	proto.RegisterType((*CompactRegionRequest)(nil), "pb.CompactRegionRequest")
	proto.RegisterType((*CompactRegionResponse)(nil), "pb.CompactRegionResponse")
	proto.RegisterType((*UpdateFavoredNodesRequest)(nil), "pb.UpdateFavoredNodesRequest")
	proto.RegisterType((*UpdateFavoredNodesRequest_RegionUpdateInfo)(nil), "pb.UpdateFavoredNodesRequest.RegionUpdateInfo")
	proto.RegisterType((*UpdateFavoredNodesResponse)(nil), "pb.UpdateFavoredNodesResponse")
	proto.RegisterType((*MergeRegionsRequest)(nil), "pb.MergeRegionsRequest")
	proto.RegisterType((*MergeRegionsResponse)(nil), "pb.MergeRegionsResponse")
	proto.RegisterType((*WALEntry)(nil), "pb.WALEntry")
	proto.RegisterType((*ReplicateWALEntryRequest)(nil), "pb.ReplicateWALEntryRequest")
	proto.RegisterType((*ReplicateWALEntryResponse)(nil), "pb.ReplicateWALEntryResponse")
	proto.RegisterType((*RollWALWriterRequest)(nil), "pb.RollWALWriterRequest")
	proto.RegisterType((*RollWALWriterResponse)(nil), "pb.RollWALWriterResponse")
	proto.RegisterType((*StopServerRequest)(nil), "pb.StopServerRequest")
	proto.RegisterType((*StopServerResponse)(nil), "pb.StopServerResponse")
	proto.RegisterType((*GetServerInfoRequest)(nil), "pb.GetServerInfoRequest")
	proto.RegisterType((*ServerInfo)(nil), "pb.ServerInfo")
	proto.RegisterType((*GetServerInfoResponse)(nil), "pb.GetServerInfoResponse")
	proto.RegisterType((*UpdateConfigurationRequest)(nil), "pb.UpdateConfigurationRequest")
	proto.RegisterType((*UpdateConfigurationResponse)(nil), "pb.UpdateConfigurationResponse")
	proto.RegisterEnum("pb.GetRegionInfoResponse_CompactionState", GetRegionInfoResponse_CompactionState_name, GetRegionInfoResponse_CompactionState_value)
	proto.RegisterEnum("pb.OpenRegionResponse_RegionOpeningState", OpenRegionResponse_RegionOpeningState_name, OpenRegionResponse_RegionOpeningState_value)
}

var fileDescriptor1 = []byte{
	// 1637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x58, 0x5d, 0x6f, 0xdb, 0xe4,
	0x17, 0xff, 0x3b, 0x69, 0xbb, 0xe4, 0x34, 0x6d, 0xd3, 0x27, 0x7d, 0xc9, 0xdc, 0xf5, 0xbf, 0x61,
	0xa1, 0xd1, 0x31, 0x08, 0x52, 0xd1, 0x24, 0x04, 0x62, 0x90, 0xa6, 0xe9, 0xd6, 0xad, 0x4b, 0x2a,
	0xb7, 0xac, 0x62, 0x42, 0xb2, 0x9c, 0xe4, 0x49, 0x6b, 0xe6, 0xf8, 0xf1, 0x6c, 0x67, 0x53, 0xef,
	0xb9, 0x40, 0x88, 0x1b, 0xae, 0xb8, 0x84, 0x4f, 0xc0, 0x17, 0xe0, 0x9e, 0x6f, 0xc1, 0x2d, 0x9f,
	0x83, 0xf3, 0xbc, 0x24, 0xb1, 0x63, 0xa7, 0x03, 0x2a, 0x55, 0xaa, 0x7d, 0xce, 0x79, 0xce, 0xdb,
	0x73, 0xce, 0xef, 0x1c, 0x07, 0x16, 0xeb, 0xbd, 0x81, 0xe3, 0xd5, 0xfc, 0x80, 0x45, 0x8c, 0xe4,
	0xfc, 0x8e, 0x5e, 0x6a, 0xb8, 0x0e, 0xf5, 0x22, 0x49, 0xd1, 0x17, 0x1f, 0xef, 0xd9, 0x21, 0x55,
	0x2f, 0xc5, 0xb3, 0xfa, 0x91, 0x7c, 0x34, 0x3c, 0x58, 0x7b, 0x44, 0x23, 0x93, 0x9e, 0x3b, 0xcc,
	0x3b, 0xf4, 0xfa, 0xcc, 0xa4, 0xaf, 0x86, 0x34, 0x8c, 0xc8, 0x7d, 0x58, 0x08, 0x04, 0xb1, 0xaa,
	0xdd, 0xc9, 0xed, 0x2c, 0xee, 0x56, 0x6a, 0x7e, 0xa7, 0x26, 0xc5, 0x4e, 0x7c, 0xda, 0x75, 0xfa,
	0x0e, 0x0d, 0x4c, 0x25, 0x42, 0xee, 0x41, 0xb9, 0xcb, 0x06, 0xbe, 0xdd, 0x8d, 0xf0, 0xcd, 0x0a,
	0x23, 0x3b, 0xa2, 0xd5, 0xdc, 0x1d, 0x6d, 0xa7, 0x60, 0xae, 0x4c, 0xe8, 0x27, 0x9c, 0x6c, 0xfc,
	0x90, 0x83, 0xf5, 0x29, 0x83, 0xa1, 0xcf, 0xbc, 0x90, 0x92, 0x8f, 0x60, 0x51, 0xaa, 0xb3, 0x1c,
	0x24, 0x2b, 0xb3, 0xcb, 0x13, 0xb3, 0x42, 0x18, 0x82, 0xf1, 0x33, 0x39, 0x9d, 0x61, 0x75, 0x79,
	0xf7, 0x1e, 0x3f, 0x95, 0x69, 0xa5, 0xd6, 0x48, 0xfa, 0x93, 0x72, 0x90, 0x18, 0x50, 0x72, 0x42,
	0x93, 0x76, 0xd9, 0x6b, 0x1a, 0x38, 0xde, 0x79, 0x35, 0x2f, 0xe2, 0x48, 0xd0, 0x8c, 0x03, 0x58,
	0x99, 0xd2, 0x43, 0x0a, 0x30, 0xd7, 0x6a, 0xb7, 0x9a, 0xe5, 0xff, 0x91, 0x22, 0xcc, 0x3f, 0x3b,
	0x6c, 0xb5, 0xcd, 0xb2, 0x26, 0x1e, 0xeb, 0x4f, 0xf0, 0x31, 0x47, 0x2a, 0xb0, 0x22, 0x1e, 0xad,
	0x7a, 0x6b, 0xdf, 0x92, 0xfc, 0xbc, 0xf1, 0x02, 0x2a, 0xe8, 0xe5, 0x49, 0xc4, 0x02, 0x7a, 0xe0,
	0xb8, 0xf4, 0x3f, 0xe5, 0x7e, 0x03, 0x16, 0xfa, 0xf6, 0xc0, 0x71, 0x2f, 0x31, 0xf6, 0xfc, 0x4e,
	0xc9, 0x54, 0x6f, 0xc6, 0x03, 0x71, 0xb1, 0x31, 0xdd, 0x2a, 0xcd, 0xdb, 0x00, 0x21, 0x27, 0x5a,
	0x7d, 0xa4, 0xa2, 0x81, 0xfc, 0x4e, 0xd1, 0x2c, 0x86, 0x23, 0x31, 0xa3, 0x0a, 0x1b, 0x78, 0xac,
	0xed, 0xb9, 0x8e, 0x47, 0xa5, 0x49, 0xe5, 0x95, 0xf1, 0x04, 0x36, 0x53, 0x9c, 0x59, 0x57, 0x97,
	0xbf, 0xfa, 0xea, 0x8c, 0x9f, 0xf3, 0xb0, 0xda, 0xf6, 0xa9, 0x97, 0xb0, 0x40, 0xea, 0x50, 0x64,
	0x48, 0x8c, 0x2b, 0x79, 0x97, 0x2b, 0x49, 0x49, 0x2a, 0xb5, 0x9c, 0x2e, 0x54, 0x17, 0x98, 0x7a,
	0x22, 0x3b, 0xb0, 0x12, 0xd2, 0x00, 0xaf, 0x09, 0x6f, 0x25, 0x88, 0x1a, 0xac, 0x27, 0x4b, 0x62,
	0xce, 0x9c, 0x26, 0x93, 0x0f, 0x80, 0x0c, 0xec, 0x30, 0xa2, 0x81, 0x15, 0x5e, 0xe2, 0xbf, 0x81,
	0x15, 0x39, 0x03, 0x5a, 0x9d, 0x17, 0xc2, 0x65, 0xc9, 0x39, 0x11, 0x8c, 0x53, 0xa4, 0xeb, 0x7f,
	0x69, 0xb0, 0x9c, 0x34, 0x4a, 0xee, 0x4e, 0xdd, 0xd2, 0x74, 0xbc, 0xa3, 0x0b, 0x7a, 0x00, 0x9b,
	0x68, 0x38, 0xe4, 0xd9, 0x61, 0x7d, 0xfc, 0xeb, 0xf3, 0x04, 0x5a, 0xde, 0xc8, 0xb5, 0x25, 0x73,
	0x4d, 0xb1, 0xdb, 0xfd, 0xb6, 0x64, 0xb6, 0xb8, 0x7f, 0x1f, 0xc3, 0x52, 0xdf, 0x7e, 0x8d, 0xd7,
	0xd2, 0x13, 0xb2, 0x21, 0x16, 0xe2, 0x38, 0xab, 0x27, 0x22, 0x96, 0x96, 0x3d, 0xa0, 0x66, 0x49,
	0x09, 0xf1, 0x33, 0x21, 0xf9, 0x12, 0xb6, 0x78, 0x2a, 0x0e, 0x58, 0xb0, 0xef, 0x84, 0x51, 0xe0,
	0x74, 0x86, 0x11, 0xed, 0x1d, 0xb1, 0x73, 0x93, 0xfa, 0xae, 0x7d, 0x59, 0x9d, 0x13, 0xb5, 0x7c,
	0x95, 0x88, 0xf1, 0x9b, 0x06, 0x24, 0x9e, 0x6f, 0x75, 0xc3, 0x2d, 0x58, 0xe2, 0xa7, 0xb0, 0xf8,
	0x55, 0xa3, 0xf1, 0xeb, 0x51, 0x8d, 0x96, 0x16, 0x8f, 0xdd, 0x0f, 0x9e, 0x90, 0x8d, 0x56, 0x62,
	0xb1, 0x37, 0xe3, 0x31, 0x90, 0xb4, 0x0c, 0x01, 0x58, 0x68, 0x1f, 0x37, 0x5b, 0xcd, 0x7d, 0x6c,
	0x23, 0x02, 0xcb, 0xf5, 0x23, 0xb3, 0x59, 0xdf, 0xff, 0xda, 0x52, 0x34, 0x8d, 0xd3, 0x0e, 0xea,
	0x87, 0x47, 0xcd, 0x7d, 0x41, 0x3a, 0x6c, 0x3d, 0x2a, 0xe7, 0x8c, 0x26, 0x54, 0xce, 0xec, 0x60,
	0x30, 0xf4, 0x93, 0xb5, 0x54, 0x83, 0x58, 0xbd, 0xbd, 0x1d, 0x4c, 0x8c, 0x0d, 0x58, 0x4b, 0xaa,
	0x91, 0x91, 0x18, 0x3f, 0xe5, 0x80, 0x34, 0x5c, 0x16, 0x26, 0x9b, 0xe1, 0xdf, 0xb5, 0x68, 0xb2,
	0x02, 0xba, 0xa8, 0x8d, 0xe7, 0x31, 0xb3, 0x02, 0x1a, 0x92, 0x29, 0x2a, 0xa0, 0x06, 0xe5, 0x28,
	0xb0, 0xbd, 0xd0, 0x89, 0x64, 0x67, 0x59, 0x2f, 0x9e, 0x4a, 0x34, 0xfa, 0x74, 0x2e, 0x0a, 0x86,
	0xd4, 0x5c, 0x9e, 0x70, 0x0f, 0xbd, 0x17, 0x4f, 0xc9, 0xe7, 0x40, 0xb0, 0x06, 0x22, 0xc7, 0xb3,
	0x25, 0x20, 0x8a, 0x22, 0x11, 0x77, 0x9e, 0x2e, 0x9b, 0xd5, 0x98, 0xa4, 0x24, 0x67, 0xb5, 0xce,
	0x7c, 0x66, 0xeb, 0x18, 0x1f, 0x42, 0x25, 0x91, 0x12, 0x55, 0x23, 0x88, 0x44, 0x3c, 0x36, 0xda,
	0x13, 0x39, 0x29, 0x98, 0xea, 0xcd, 0xf8, 0x05, 0x4b, 0xea, 0xc0, 0x1d, 0x86, 0x17, 0xd7, 0x48,
	0xe1, 0x7b, 0x50, 0x76, 0xb0, 0x79, 0xdc, 0x1e, 0xf6, 0x6b, 0x74, 0x61, 0x7b, 0x56, 0x14, 0xaa,
	0xc6, 0x5e, 0x72, 0xfa, 0x6d, 0x4e, 0x3e, 0x45, 0xea, 0x69, 0x88, 0x6d, 0xb3, 0xf1, 0x26, 0x70,
	0x22, 0x84, 0x37, 0x6e, 0xd1, 0x7a, 0x63, 0xbb, 0xd6, 0xc0, 0x0e, 0x5e, 0x62, 0x22, 0x24, 0x90,
	0x57, 0x04, 0x57, 0xb8, 0x73, 0x66, 0xbb, 0xcf, 0x04, 0xcb, 0xf8, 0x51, 0x83, 0x4a, 0xc2, 0x43,
	0x15, 0xd1, 0x5d, 0x58, 0x71, 0x11, 0x09, 0x94, 0x2e, 0x01, 0x10, 0xdc, 0x57, 0x34, 0xca, 0xc9,
	0xe2, 0x04, 0x47, 0x07, 0x52, 0x85, 0x1b, 0x42, 0x04, 0x43, 0x97, 0x63, 0x6f, 0xf4, 0x2a, 0xdd,
	0x61, 0x57, 0xba, 0xc3, 0x52, 0xee, 0x74, 0x80, 0x9c, 0xf8, 0xae, 0x13, 0x5d, 0x23, 0x5f, 0xb7,
	0x61, 0x31, 0xe4, 0x2a, 0x2c, 0x9f, 0x39, 0x5e, 0x24, 0xbc, 0x2a, 0x99, 0x20, 0x48, 0xc7, 0x9c,
	0x62, 0xac, 0x43, 0x25, 0x61, 0x43, 0x95, 0xfb, 0x2b, 0x58, 0x53, 0x93, 0xed, 0x1a, 0xc6, 0xd7,
	0x60, 0x7e, 0x60, 0x7f, 0xcb, 0x02, 0x95, 0x0c, 0xf9, 0x12, 0x1b, 0x54, 0x79, 0xe1, 0xcd, 0x68,
	0x50, 0x6d, 0xc2, 0xfa, 0x94, 0x49, 0xe5, 0xcb, 0x9f, 0x1a, 0xdc, 0xfc, 0xca, 0xef, 0x21, 0x30,
	0x1c, 0xc4, 0x30, 0x6e, 0xe4, 0x51, 0x1b, 0x16, 0x87, 0x82, 0x19, 0x1f, 0x17, 0x35, 0xee, 0xd6,
	0xcc, 0x33, 0xca, 0x61, 0xc9, 0x97, 0x08, 0x30, 0x1c, 0x3f, 0xeb, 0x0c, 0xca, 0xd3, 0xfc, 0x7f,
	0x8c, 0xf1, 0x29, 0xb0, 0xce, 0xbd, 0x1d, 0xac, 0x8d, 0x4f, 0x40, 0xcf, 0x72, 0x55, 0xd5, 0x9e,
	0x0e, 0x85, 0x40, 0x3d, 0xa3, 0x71, 0x8e, 0x12, 0xe3, 0x77, 0xe3, 0x0f, 0xac, 0xd7, 0x67, 0x34,
	0x38, 0x57, 0x1d, 0x18, 0x4e, 0x40, 0xaf, 0xa0, 0xe6, 0xb0, 0x7d, 0xd5, 0x3d, 0xdd, 0x90, 0x42,
	0xf5, 0x98, 0x7c, 0x07, 0x3d, 0x7e, 0x9b, 0xfc, 0x1e, 0x79, 0x07, 0x0a, 0x7d, 0x16, 0x74, 0x9d,
	0x0e, 0x6e, 0x0e, 0x12, 0x89, 0xe6, 0xfb, 0xb6, 0x8b, 0x40, 0x30, 0x26, 0xcf, 0x18, 0xab, 0x73,
	0xd9, 0x63, 0x95, 0xa3, 0x6e, 0x32, 0x0e, 0x15, 0xe0, 0x77, 0x1a, 0x14, 0x70, 0x47, 0x6d, 0x7a,
	0x51, 0x70, 0x49, 0x6e, 0x41, 0xfe, 0x25, 0xbd, 0x54, 0x01, 0x01, 0x77, 0x10, 0x59, 0x4f, 0xe9,
	0xa5, 0xc9, 0xc9, 0xbc, 0x47, 0xf1, 0x9f, 0xf5, 0xda, 0x76, 0x87, 0xd4, 0xea, 0x5c, 0x46, 0x2a,
	0xf9, 0x25, 0x73, 0x09, 0xc9, 0xcf, 0x39, 0x75, 0x8f, 0x13, 0xc9, 0x2e, 0xac, 0xdb, 0x61, 0xc8,
	0xba, 0x0e, 0x26, 0xbc, 0x67, 0x75, 0xa9, 0xeb, 0x5a, 0x5d, 0x36, 0xc4, 0xde, 0xe0, 0x81, 0xcc,
	0x9b, 0x95, 0x09, 0xb3, 0x81, 0xbc, 0x06, 0x67, 0x19, 0x0f, 0xa1, 0xca, 0xc7, 0xa2, 0xd3, 0x45,
	0xf2, 0xc8, 0x9d, 0x51, 0xae, 0x0d, 0x98, 0xa7, 0xfc, 0x5d, 0x55, 0x5e, 0x49, 0xf9, 0x25, 0x65,
	0x24, 0xcb, 0xd8, 0x82, 0x9b, 0x19, 0xe7, 0x55, 0x8c, 0x18, 0xbb, 0xc9, 0x5c, 0x17, 0xe9, 0x67,
	0x1c, 0x92, 0x82, 0xd1, 0x9e, 0xf5, 0x05, 0xac, 0x4f, 0xd1, 0x27, 0x68, 0xa4, 0x6e, 0x2b, 0x62,
	0x12, 0x4f, 0x84, 0x6d, 0x8c, 0x54, 0x92, 0x4f, 0x99, 0xc0, 0x11, 0xe3, 0x3e, 0xac, 0xe2, 0xda,
	0xe7, 0xcb, 0xba, 0x1b, 0xb9, 0xbb, 0xc1, 0x2b, 0xd9, 0x0e, 0x55, 0x25, 0x17, 0x4d, 0xf5, 0x66,
	0xac, 0x21, 0xd6, 0xc4, 0x84, 0x27, 0xbe, 0xf1, 0xe5, 0x51, 0x10, 0x63, 0x5f, 0x05, 0xc6, 0x37,
	0x00, 0x13, 0x22, 0x5f, 0xfb, 0xe4, 0x68, 0xb0, 0x3c, 0x5b, 0x41, 0x63, 0xba, 0xe6, 0x21, 0x1c,
	0x3f, 0xf3, 0xdd, 0xf3, 0x0d, 0xed, 0x0c, 0x1d, 0x44, 0xa5, 0x20, 0x52, 0xb3, 0xaf, 0x28, 0x28,
	0xc7, 0x48, 0xc0, 0xa5, 0x60, 0x7d, 0xca, 0xea, 0x64, 0xbf, 0x54, 0x86, 0xa6, 0x3f, 0x0d, 0x62,
	0xc2, 0xca, 0x90, 0x98, 0xe6, 0xb7, 0x46, 0xad, 0xd5, 0x60, 0x5e, 0xdf, 0x39, 0x1f, 0x06, 0x62,
	0xd0, 0x8d, 0xa2, 0xd8, 0x86, 0xad, 0x4c, 0xae, 0xb4, 0xb6, 0xfb, 0x7b, 0x11, 0x4a, 0xe2, 0x63,
	0x8a, 0x2b, 0x77, 0xba, 0x94, 0xec, 0xc3, 0x52, 0xe2, 0x63, 0x82, 0x54, 0x33, 0xbe, 0x2f, 0x84,
	0x6a, 0xfd, 0xe6, 0xcc, 0x2f, 0x0f, 0xdc, 0x6e, 0x4b, 0xf1, 0x85, 0x9c, 0x6c, 0x2a, 0xd1, 0xe9,
	0xf5, 0x5f, 0xaf, 0xa6, 0x19, 0x4a, 0xc5, 0x13, 0x58, 0x99, 0x5a, 0xc1, 0x89, 0xae, 0x84, 0x33,
	0x36, 0x76, 0x7d, 0x2b, 0x93, 0xa7, 0x74, 0x7d, 0x06, 0x30, 0x59, 0xdc, 0xc8, 0x7a, 0xe6, 0x9e,
	0xad, 0x6f, 0x64, 0xef, 0x77, 0x3c, 0x96, 0xf8, 0xb6, 0x24, 0x63, 0xc9, 0x58, 0xc3, 0x64, 0x2c,
	0x59, 0x8b, 0x15, 0x79, 0x08, 0x8b, 0xb1, 0x25, 0x82, 0x08, 0x4b, 0xe9, 0x45, 0x4b, 0xdf, 0x4c,
	0xd1, 0x27, 0xe7, 0x63, 0x23, 0x5b, 0x9e, 0x4f, 0x6f, 0x19, 0xf2, 0x7c, 0xd6, 0x6c, 0xc7, 0xf3,
	0xb1, 0x01, 0x28, 0xcf, 0xa7, 0xa7, 0xae, 0x3c, 0x9f, 0x31, 0x29, 0x79, 0x51, 0x24, 0xc6, 0x96,
	0x2c, 0x8a, 0xac, 0xe1, 0x29, 0x8b, 0x22, 0x73, 0xc6, 0xf1, 0x44, 0xc6, 0x01, 0x50, 0x26, 0x32,
	0x03, 0xda, 0x65, 0x22, 0xb3, 0xb0, 0x92, 0x1c, 0xc3, 0x6a, 0x0a, 0x64, 0xc8, 0x2d, 0x89, 0xe3,
	0xd9, 0xd8, 0xa5, 0x6f, 0xcf, 0xe0, 0x2a, 0x8d, 0x4d, 0x58, 0x90, 0x5f, 0x03, 0xd7, 0x53, 0x83,
	0x19, 0x4a, 0x00, 0x99, 0xcc, 0x50, 0x16, 0xe6, 0xc9, 0x0c, 0x65, 0xa3, 0x9e, 0x6c, 0xbe, 0x18,
	0xea, 0x8c, 0xdb, 0x63, 0x1a, 0x9d, 0xc6, 0xcd, 0x97, 0x81, 0x20, 0x58, 0xed, 0x13, 0x98, 0x93,
	0xd5, 0x9e, 0xc2, 0x48, 0x59, 0xed, 0x69, 0x34, 0x24, 0x27, 0x40, 0xd2, 0x83, 0x9a, 0x6c, 0x5f,
	0xb9, 0x6b, 0xe8, 0xff, 0x9f, 0xc5, 0x56, 0x4a, 0x9f, 0x43, 0x25, 0x03, 0x84, 0x48, 0xec, 0x58,
	0x16, 0x76, 0xe9, 0xb7, 0x67, 0xf2, 0xa5, 0xde, 0xbd, 0x3a, 0xbc, 0xcf, 0x82, 0xf3, 0x9a, 0x8d,
	0xc5, 0x76, 0x41, 0x6b, 0x17, 0x76, 0x8f, 0x31, 0xbf, 0x76, 0xd1, 0x19, 0xff, 0xf8, 0xd3, 0x19,
	0xf6, 0x6b, 0xe7, 0xd4, 0xa3, 0x01, 0x1f, 0x75, 0x7b, 0xf2, 0x57, 0xa3, 0x63, 0xce, 0x08, 0x1f,
	0x6b, 0xdf, 0x6b, 0xda, 0xaf, 0x9a, 0xf6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x7a, 0x81,
	0xa2, 0x4b, 0x12, 0x00, 0x00,
}
