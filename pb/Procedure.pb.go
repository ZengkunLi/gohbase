// Code generated by protoc-gen-go.
// source: Procedure.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProcedureState int32

const (
	ProcedureState_INITIALIZING    ProcedureState = 1
	ProcedureState_RUNNABLE        ProcedureState = 2
	ProcedureState_WAITING         ProcedureState = 3
	ProcedureState_WAITING_TIMEOUT ProcedureState = 4
	ProcedureState_ROLLEDBACK      ProcedureState = 5
	ProcedureState_FINISHED        ProcedureState = 6
)

var ProcedureState_name = map[int32]string{
	1: "INITIALIZING",
	2: "RUNNABLE",
	3: "WAITING",
	4: "WAITING_TIMEOUT",
	5: "ROLLEDBACK",
	6: "FINISHED",
}
var ProcedureState_value = map[string]int32{
	"INITIALIZING":    1,
	"RUNNABLE":        2,
	"WAITING":         3,
	"WAITING_TIMEOUT": 4,
	"ROLLEDBACK":      5,
	"FINISHED":        6,
}

func (x ProcedureState) Enum() *ProcedureState {
	p := new(ProcedureState)
	*p = x
	return p
}
func (x ProcedureState) String() string {
	return proto.EnumName(ProcedureState_name, int32(x))
}
func (x *ProcedureState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProcedureState_value, data, "ProcedureState")
	if err != nil {
		return err
	}
	*x = ProcedureState(value)
	return nil
}
func (ProcedureState) EnumDescriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

type ProcedureWALEntry_Type int32

const (
	ProcedureWALEntry_EOF     ProcedureWALEntry_Type = 1
	ProcedureWALEntry_INIT    ProcedureWALEntry_Type = 2
	ProcedureWALEntry_INSERT  ProcedureWALEntry_Type = 3
	ProcedureWALEntry_UPDATE  ProcedureWALEntry_Type = 4
	ProcedureWALEntry_DELETE  ProcedureWALEntry_Type = 5
	ProcedureWALEntry_COMPACT ProcedureWALEntry_Type = 6
)

var ProcedureWALEntry_Type_name = map[int32]string{
	1: "EOF",
	2: "INIT",
	3: "INSERT",
	4: "UPDATE",
	5: "DELETE",
	6: "COMPACT",
}
var ProcedureWALEntry_Type_value = map[string]int32{
	"EOF":     1,
	"INIT":    2,
	"INSERT":  3,
	"UPDATE":  4,
	"DELETE":  5,
	"COMPACT": 6,
}

func (x ProcedureWALEntry_Type) Enum() *ProcedureWALEntry_Type {
	p := new(ProcedureWALEntry_Type)
	*p = x
	return p
}
func (x ProcedureWALEntry_Type) String() string {
	return proto.EnumName(ProcedureWALEntry_Type_name, int32(x))
}
func (x *ProcedureWALEntry_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProcedureWALEntry_Type_value, data, "ProcedureWALEntry_Type")
	if err != nil {
		return err
	}
	*x = ProcedureWALEntry_Type(value)
	return nil
}
func (ProcedureWALEntry_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor20, []int{6, 0} }

// *
// Procedure metadata, serialized by the ProcedureStore to be able to recover the old state.
type Procedure struct {
	// internal "static" state
	ClassName *string `protobuf:"bytes,1,req,name=class_name,json=className" json:"class_name,omitempty"`
	ParentId  *uint64 `protobuf:"varint,2,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	ProcId    *uint64 `protobuf:"varint,3,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
	StartTime *uint64 `protobuf:"varint,4,req,name=start_time,json=startTime" json:"start_time,omitempty"`
	Owner     *string `protobuf:"bytes,5,opt,name=owner" json:"owner,omitempty"`
	// internal "runtime" state
	State      *ProcedureState `protobuf:"varint,6,req,name=state,enum=pb.ProcedureState" json:"state,omitempty"`
	StackId    []uint32        `protobuf:"varint,7,rep,name=stack_id,json=stackId" json:"stack_id,omitempty"`
	LastUpdate *uint64         `protobuf:"varint,8,req,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	Timeout    *uint32         `protobuf:"varint,9,opt,name=timeout" json:"timeout,omitempty"`
	// user state/results
	Exception *ForeignExceptionMessage `protobuf:"bytes,10,opt,name=exception" json:"exception,omitempty"`
	Result    []byte                   `protobuf:"bytes,11,opt,name=result" json:"result,omitempty"`
	StateData []byte                   `protobuf:"bytes,12,opt,name=state_data,json=stateData" json:"state_data,omitempty"`
	// Nonce to prevent same procedure submit by multiple times
	NonceGroup       *uint64 `protobuf:"varint,13,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64 `protobuf:"varint,14,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Procedure) Reset()                    { *m = Procedure{} }
func (m *Procedure) String() string            { return proto.CompactTextString(m) }
func (*Procedure) ProtoMessage()               {}
func (*Procedure) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

const Default_Procedure_NonceGroup uint64 = 0
const Default_Procedure_Nonce uint64 = 0

func (m *Procedure) GetClassName() string {
	if m != nil && m.ClassName != nil {
		return *m.ClassName
	}
	return ""
}

func (m *Procedure) GetParentId() uint64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *Procedure) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

func (m *Procedure) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *Procedure) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *Procedure) GetState() ProcedureState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ProcedureState_INITIALIZING
}

func (m *Procedure) GetStackId() []uint32 {
	if m != nil {
		return m.StackId
	}
	return nil
}

func (m *Procedure) GetLastUpdate() uint64 {
	if m != nil && m.LastUpdate != nil {
		return *m.LastUpdate
	}
	return 0
}

func (m *Procedure) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *Procedure) GetException() *ForeignExceptionMessage {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *Procedure) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Procedure) GetStateData() []byte {
	if m != nil {
		return m.StateData
	}
	return nil
}

func (m *Procedure) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_Procedure_NonceGroup
}

func (m *Procedure) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_Procedure_Nonce
}

// *
// SequentialProcedure data
type SequentialProcedureData struct {
	Executed         *bool  `protobuf:"varint,1,req,name=executed" json:"executed,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SequentialProcedureData) Reset()                    { *m = SequentialProcedureData{} }
func (m *SequentialProcedureData) String() string            { return proto.CompactTextString(m) }
func (*SequentialProcedureData) ProtoMessage()               {}
func (*SequentialProcedureData) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{1} }

func (m *SequentialProcedureData) GetExecuted() bool {
	if m != nil && m.Executed != nil {
		return *m.Executed
	}
	return false
}

// *
// StateMachineProcedure data
type StateMachineProcedureData struct {
	State            []uint32 `protobuf:"varint,1,rep,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *StateMachineProcedureData) Reset()                    { *m = StateMachineProcedureData{} }
func (m *StateMachineProcedureData) String() string            { return proto.CompactTextString(m) }
func (*StateMachineProcedureData) ProtoMessage()               {}
func (*StateMachineProcedureData) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{2} }

func (m *StateMachineProcedureData) GetState() []uint32 {
	if m != nil {
		return m.State
	}
	return nil
}

// *
// Procedure WAL header
type ProcedureWALHeader struct {
	Version          *uint32 `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	LogId            *uint64 `protobuf:"varint,3,req,name=log_id,json=logId" json:"log_id,omitempty"`
	MinProcId        *uint64 `protobuf:"varint,4,req,name=min_proc_id,json=minProcId" json:"min_proc_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProcedureWALHeader) Reset()                    { *m = ProcedureWALHeader{} }
func (m *ProcedureWALHeader) String() string            { return proto.CompactTextString(m) }
func (*ProcedureWALHeader) ProtoMessage()               {}
func (*ProcedureWALHeader) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{3} }

func (m *ProcedureWALHeader) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ProcedureWALHeader) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ProcedureWALHeader) GetLogId() uint64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *ProcedureWALHeader) GetMinProcId() uint64 {
	if m != nil && m.MinProcId != nil {
		return *m.MinProcId
	}
	return 0
}

// *
// Procedure WAL trailer
type ProcedureWALTrailer struct {
	Version          *uint32 `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	TrackerPos       *uint64 `protobuf:"varint,2,req,name=tracker_pos,json=trackerPos" json:"tracker_pos,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProcedureWALTrailer) Reset()                    { *m = ProcedureWALTrailer{} }
func (m *ProcedureWALTrailer) String() string            { return proto.CompactTextString(m) }
func (*ProcedureWALTrailer) ProtoMessage()               {}
func (*ProcedureWALTrailer) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{4} }

func (m *ProcedureWALTrailer) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ProcedureWALTrailer) GetTrackerPos() uint64 {
	if m != nil && m.TrackerPos != nil {
		return *m.TrackerPos
	}
	return 0
}

type ProcedureStoreTracker struct {
	Node             []*ProcedureStoreTracker_TrackerNode `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *ProcedureStoreTracker) Reset()                    { *m = ProcedureStoreTracker{} }
func (m *ProcedureStoreTracker) String() string            { return proto.CompactTextString(m) }
func (*ProcedureStoreTracker) ProtoMessage()               {}
func (*ProcedureStoreTracker) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{5} }

func (m *ProcedureStoreTracker) GetNode() []*ProcedureStoreTracker_TrackerNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type ProcedureStoreTracker_TrackerNode struct {
	StartId          *uint64  `protobuf:"varint,1,req,name=start_id,json=startId" json:"start_id,omitempty"`
	Updated          []uint64 `protobuf:"varint,2,rep,name=updated" json:"updated,omitempty"`
	Deleted          []uint64 `protobuf:"varint,3,rep,name=deleted" json:"deleted,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProcedureStoreTracker_TrackerNode) Reset()         { *m = ProcedureStoreTracker_TrackerNode{} }
func (m *ProcedureStoreTracker_TrackerNode) String() string { return proto.CompactTextString(m) }
func (*ProcedureStoreTracker_TrackerNode) ProtoMessage()    {}
func (*ProcedureStoreTracker_TrackerNode) Descriptor() ([]byte, []int) {
	return fileDescriptor20, []int{5, 0}
}

func (m *ProcedureStoreTracker_TrackerNode) GetStartId() uint64 {
	if m != nil && m.StartId != nil {
		return *m.StartId
	}
	return 0
}

func (m *ProcedureStoreTracker_TrackerNode) GetUpdated() []uint64 {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *ProcedureStoreTracker_TrackerNode) GetDeleted() []uint64 {
	if m != nil {
		return m.Deleted
	}
	return nil
}

type ProcedureWALEntry struct {
	Type             *ProcedureWALEntry_Type `protobuf:"varint,1,req,name=type,enum=pb.ProcedureWALEntry_Type" json:"type,omitempty"`
	Procedure        []*Procedure            `protobuf:"bytes,2,rep,name=procedure" json:"procedure,omitempty"`
	ProcId           *uint64                 `protobuf:"varint,3,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *ProcedureWALEntry) Reset()                    { *m = ProcedureWALEntry{} }
func (m *ProcedureWALEntry) String() string            { return proto.CompactTextString(m) }
func (*ProcedureWALEntry) ProtoMessage()               {}
func (*ProcedureWALEntry) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{6} }

func (m *ProcedureWALEntry) GetType() ProcedureWALEntry_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ProcedureWALEntry_EOF
}

func (m *ProcedureWALEntry) GetProcedure() []*Procedure {
	if m != nil {
		return m.Procedure
	}
	return nil
}

func (m *ProcedureWALEntry) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

func init() {
	proto.RegisterType((*Procedure)(nil), "pb.Procedure")
	proto.RegisterType((*SequentialProcedureData)(nil), "pb.SequentialProcedureData")
	proto.RegisterType((*StateMachineProcedureData)(nil), "pb.StateMachineProcedureData")
	proto.RegisterType((*ProcedureWALHeader)(nil), "pb.ProcedureWALHeader")
	proto.RegisterType((*ProcedureWALTrailer)(nil), "pb.ProcedureWALTrailer")
	proto.RegisterType((*ProcedureStoreTracker)(nil), "pb.ProcedureStoreTracker")
	proto.RegisterType((*ProcedureStoreTracker_TrackerNode)(nil), "pb.ProcedureStoreTracker.TrackerNode")
	proto.RegisterType((*ProcedureWALEntry)(nil), "pb.ProcedureWALEntry")
	proto.RegisterEnum("pb.ProcedureState", ProcedureState_name, ProcedureState_value)
	proto.RegisterEnum("pb.ProcedureWALEntry_Type", ProcedureWALEntry_Type_name, ProcedureWALEntry_Type_value)
}

var fileDescriptor20 = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0x5b, 0x8e, 0xe3, 0x44,
	0x14, 0x95, 0x63, 0xe7, 0xe1, 0xeb, 0x74, 0x26, 0x54, 0xcf, 0x30, 0x9e, 0x8c, 0x80, 0x96, 0x25,
	0xa4, 0x68, 0x90, 0x2c, 0x88, 0xc4, 0x07, 0xfc, 0x25, 0x1d, 0xf7, 0xc4, 0x90, 0x97, 0x1c, 0x47,
	0x23, 0x21, 0x24, 0xcb, 0xb1, 0x8b, 0xb4, 0x45, 0xc6, 0x65, 0xca, 0x36, 0x4c, 0xef, 0x80, 0x65,
	0xb0, 0x04, 0x16, 0xc1, 0x16, 0xd8, 0x0f, 0xb7, 0xca, 0xce, 0x8b, 0x8f, 0xf9, 0x4a, 0x9d, 0x73,
	0xee, 0x2b, 0xf7, 0x61, 0x78, 0xb6, 0xe6, 0x2c, 0xa2, 0x71, 0xc9, 0xa9, 0x9d, 0x71, 0x56, 0x30,
	0xd2, 0xc8, 0x76, 0x83, 0x5b, 0x87, 0x73, 0xc6, 0x67, 0x61, 0x1a, 0x1f, 0x92, 0x74, 0x5f, 0x09,
	0xd6, 0x3f, 0x2a, 0xe8, 0x27, 0x63, 0xf2, 0x19, 0x40, 0x74, 0x08, 0xf3, 0x3c, 0x48, 0xc3, 0xf7,
	0xd4, 0x54, 0xee, 0x1a, 0x43, 0xdd, 0xd3, 0x25, 0xb3, 0x44, 0x82, 0xbc, 0x06, 0x3d, 0x0b, 0x39,
	0x4d, 0x8b, 0x20, 0x89, 0xcd, 0xc6, 0x9d, 0x32, 0xd4, 0xbc, 0x4e, 0x45, 0xb8, 0x31, 0x79, 0x09,
	0x6d, 0x0c, 0x19, 0x09, 0x49, 0x45, 0x47, 0xcd, 0x6b, 0x09, 0x88, 0x02, 0x06, 0xcd, 0x8b, 0x90,
	0x17, 0x41, 0x91, 0x60, 0x50, 0x4d, 0x6a, 0xba, 0x64, 0x7c, 0x24, 0xc8, 0x73, 0x68, 0xb2, 0x3f,
	0x52, 0xca, 0xcd, 0x26, 0x06, 0xd4, 0xbd, 0x0a, 0x90, 0x21, 0x34, 0xd1, 0xa4, 0xa0, 0x66, 0x0b,
	0xed, 0x7b, 0x23, 0x62, 0x67, 0x3b, 0xfb, 0x54, 0xe7, 0x46, 0x28, 0x5e, 0x65, 0x40, 0x5e, 0x41,
	0x07, 0x1f, 0xd1, 0xaf, 0x22, 0x71, 0xfb, 0x4e, 0x1d, 0xde, 0x78, 0x6d, 0x89, 0x31, 0xf3, 0x17,
	0x60, 0x60, 0xed, 0x45, 0x50, 0x66, 0xb1, 0x08, 0xd5, 0x91, 0xa9, 0x41, 0x50, 0x5b, 0xc9, 0x10,
	0x13, 0xda, 0xa2, 0x28, 0x56, 0x16, 0xa6, 0x8e, 0xd9, 0xd1, 0xb5, 0x86, 0xe4, 0x3b, 0xd0, 0xe9,
	0x87, 0x88, 0x66, 0x45, 0xc2, 0x52, 0x13, 0x50, 0x33, 0x46, 0xaf, 0x45, 0x0d, 0x0f, 0x8c, 0xd3,
	0x64, 0x9f, 0x3a, 0x47, 0x6d, 0x41, 0xf3, 0x3c, 0xdc, 0x53, 0xef, 0x6c, 0x4d, 0x3e, 0x85, 0x16,
	0xa7, 0x79, 0x79, 0x28, 0x4c, 0x03, 0xfd, 0xba, 0x5e, 0x8d, 0xea, 0x3e, 0x14, 0x34, 0xc0, 0xd4,
	0xa1, 0xd9, 0x95, 0x9a, 0x2e, 0x99, 0x29, 0x12, 0xc4, 0x02, 0x23, 0x65, 0x69, 0x44, 0x83, 0x3d,
	0x67, 0x65, 0x66, 0xde, 0x88, 0xf6, 0x7e, 0xaf, 0x7c, 0xed, 0x81, 0x64, 0xdf, 0x0a, 0x12, 0x7b,
	0xdc, 0x94, 0xc8, 0xec, 0x1d, 0xd5, 0x0a, 0x5b, 0xdf, 0xc2, 0xcb, 0x0d, 0xfd, 0xad, 0xc4, 0x49,
	0x24, 0xe1, 0xe1, 0xd4, 0x27, 0x19, 0x77, 0x00, 0x1d, 0xfa, 0x81, 0x46, 0x65, 0x41, 0x63, 0x39,
	0xd1, 0x8e, 0x77, 0xc2, 0xd6, 0x37, 0xf0, 0x4a, 0xf6, 0x72, 0x11, 0x46, 0x8f, 0x49, 0x4a, 0xaf,
	0x1d, 0x9f, 0x1f, 0x47, 0xa0, 0xc8, 0xae, 0x56, 0xc0, 0x7a, 0x02, 0x72, 0x32, 0x7b, 0x37, 0x9e,
	0xcf, 0x68, 0x18, 0xe3, 0xb8, 0xb0, 0x91, 0xbf, 0x53, 0x9e, 0x8b, 0x66, 0x89, 0x1c, 0xd8, 0xc8,
	0x1a, 0x12, 0x02, 0x5a, 0xf1, 0x94, 0x51, 0x5c, 0x17, 0x41, 0xcb, 0x37, 0x79, 0x01, 0xad, 0x03,
	0xdb, 0x9f, 0x37, 0xa5, 0x89, 0x08, 0xc7, 0xf5, 0x39, 0x18, 0xef, 0x93, 0x34, 0x38, 0x6e, 0x51,
	0xbd, 0x29, 0x48, 0xad, 0xe5, 0x22, 0x59, 0x6b, 0xb8, 0xbd, 0x4c, 0xed, 0xf3, 0x30, 0x39, 0x7c,
	0x34, 0x37, 0xce, 0xbf, 0xe0, 0xb8, 0x0a, 0x94, 0x07, 0x19, 0xcb, 0x65, 0x09, 0x38, 0xff, 0x9a,
	0x5a, 0xb3, 0xdc, 0xfa, 0x5b, 0x81, 0x17, 0x17, 0x5b, 0x85, 0xb3, 0xf5, 0x2b, 0x11, 0xe7, 0xaf,
	0xa5, 0x2c, 0xae, 0xfe, 0xbb, 0x31, 0xfa, 0xf2, 0x7f, 0xeb, 0x77, 0x36, 0xb4, 0xeb, 0xdf, 0x25,
	0x1a, 0x7b, 0xd2, 0x65, 0xf0, 0x33, 0x18, 0x17, 0x64, 0xbd, 0x9f, 0x5c, 0xde, 0x8c, 0x22, 0x2b,
	0x68, 0x4b, 0x8c, 0x7f, 0x18, 0x2b, 0xaf, 0x56, 0x53, 0x5c, 0x93, 0x2a, 0x94, 0x1a, 0x0a, 0x25,
	0xa6, 0x07, 0x2a, 0x14, 0xb5, 0x52, 0x6a, 0x68, 0xfd, 0xab, 0xc0, 0x27, 0x97, 0x5d, 0x70, 0xd2,
	0x82, 0x3f, 0x11, 0xbb, 0xee, 0xb2, 0x22, 0xaf, 0x65, 0x70, 0x55, 0xee, 0xd1, 0xc8, 0xf6, 0xd1,
	0xa2, 0x9e, 0xc0, 0x57, 0x78, 0xc9, 0x47, 0x5d, 0xe6, 0x36, 0x46, 0x37, 0x57, 0x4e, 0xde, 0x59,
	0xbf, 0xbe, 0x6c, 0xe5, 0x7c, 0xd9, 0xd6, 0x0f, 0xa0, 0x89, 0x98, 0xa4, 0x0d, 0xaa, 0xb3, 0x7a,
	0xe8, 0x2b, 0xa4, 0x03, 0x9a, 0xbb, 0x74, 0xfd, 0x7e, 0x83, 0x00, 0xb4, 0xdc, 0xe5, 0xc6, 0xf1,
	0xfc, 0xbe, 0x2a, 0xde, 0xdb, 0xf5, 0x74, 0xec, 0x3b, 0x7d, 0x4d, 0xbc, 0xa7, 0xce, 0xdc, 0xc1,
	0x77, 0x93, 0x18, 0xd0, 0xbe, 0x5f, 0x2d, 0xd6, 0xe3, 0x7b, 0xbf, 0xdf, 0x7a, 0x93, 0x41, 0xef,
	0xfa, 0xbe, 0x49, 0x1f, 0xba, 0x22, 0x98, 0x3b, 0x9e, 0xbb, 0x3f, 0xb9, 0xcb, 0xb7, 0x18, 0xbe,
	0x0b, 0x1d, 0x6f, 0xbb, 0x5c, 0x8e, 0x27, 0x73, 0x07, 0x53, 0xa0, 0xfb, 0xbb, 0x31, 0xea, 0x28,
	0xa9, 0xe4, 0x16, 0x9e, 0xd5, 0x20, 0xf0, 0xdd, 0x85, 0xb3, 0xda, 0xfa, 0x98, 0xac, 0x07, 0xe0,
	0xad, 0xe6, 0x73, 0x67, 0x3a, 0x19, 0xdf, 0xff, 0x88, 0x09, 0xd1, 0xff, 0x01, 0x43, 0x6e, 0x66,
	0xce, 0xb4, 0xdf, 0x9a, 0x38, 0xf0, 0x86, 0xf1, 0xbd, 0x1d, 0x66, 0xb8, 0xfc, 0xd4, 0x7e, 0x0c,
	0x63, 0xc6, 0x32, 0xfb, 0x71, 0x17, 0xe6, 0xf5, 0x47, 0x73, 0x57, 0xfe, 0x62, 0xef, 0x29, 0x7e,
	0x8c, 0xc4, 0x44, 0x26, 0xe7, 0x4f, 0xea, 0x5a, 0x88, 0xf9, 0x4c, 0xf9, 0x53, 0x51, 0xfe, 0x52,
	0x94, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xf6, 0xfc, 0x4f, 0x6c, 0x05, 0x00, 0x00,
}
