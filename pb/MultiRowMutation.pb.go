// Code generated by protoc-gen-go.
// source: MultiRowMutation.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MultiRowMutationProcessorRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *MultiRowMutationProcessorRequest) Reset()         { *m = MultiRowMutationProcessorRequest{} }
func (m *MultiRowMutationProcessorRequest) String() string { return proto.CompactTextString(m) }
func (*MultiRowMutationProcessorRequest) ProtoMessage()    {}
func (*MultiRowMutationProcessorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{0}
}

type MultiRowMutationProcessorResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *MultiRowMutationProcessorResponse) Reset()         { *m = MultiRowMutationProcessorResponse{} }
func (m *MultiRowMutationProcessorResponse) String() string { return proto.CompactTextString(m) }
func (*MultiRowMutationProcessorResponse) ProtoMessage()    {}
func (*MultiRowMutationProcessorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{1}
}

type MutateRowsRequest struct {
	MutationRequest  []*MutationProto `protobuf:"bytes,1,rep,name=mutation_request,json=mutationRequest" json:"mutation_request,omitempty"`
	NonceGroup       *uint64          `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup" json:"nonce_group,omitempty"`
	Nonce            *uint64          `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
	Region           *RegionSpecifier `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *MutateRowsRequest) Reset()                    { *m = MutateRowsRequest{} }
func (m *MutateRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*MutateRowsRequest) ProtoMessage()               {}
func (*MutateRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

func (m *MutateRowsRequest) GetMutationRequest() []*MutationProto {
	if m != nil {
		return m.MutationRequest
	}
	return nil
}

func (m *MutateRowsRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return 0
}

func (m *MutateRowsRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *MutateRowsRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

type MutateRowsResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *MutateRowsResponse) Reset()                    { *m = MutateRowsResponse{} }
func (m *MutateRowsResponse) String() string            { return proto.CompactTextString(m) }
func (*MutateRowsResponse) ProtoMessage()               {}
func (*MutateRowsResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

func init() {
	proto.RegisterType((*MultiRowMutationProcessorRequest)(nil), "pb.MultiRowMutationProcessorRequest")
	proto.RegisterType((*MultiRowMutationProcessorResponse)(nil), "pb.MultiRowMutationProcessorResponse")
	proto.RegisterType((*MutateRowsRequest)(nil), "pb.MutateRowsRequest")
	proto.RegisterType((*MutateRowsResponse)(nil), "pb.MutateRowsResponse")
}

var fileDescriptor16 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4e, 0x32, 0x31,
	0x14, 0x85, 0x53, 0xe0, 0xff, 0x17, 0x77, 0x4c, 0x94, 0x8a, 0x38, 0x61, 0x23, 0x8e, 0x1b, 0xa2,
	0x49, 0x17, 0x6c, 0x75, 0x85, 0x0b, 0x59, 0x48, 0x62, 0x4a, 0xe2, 0x96, 0xcc, 0x0c, 0x97, 0xa1,
	0x09, 0xf6, 0xd6, 0xb6, 0xa3, 0xaf, 0xe0, 0x63, 0xf8, 0x12, 0xbe, 0x9f, 0xc3, 0x14, 0x90, 0x10,
	0xe3, 0xf2, 0x7e, 0xf7, 0x9c, 0xd3, 0x9e, 0x16, 0xba, 0x93, 0x72, 0xe5, 0x95, 0xa4, 0xf7, 0x49,
	0xe9, 0x53, 0xaf, 0x48, 0x0b, 0x63, 0xc9, 0x13, 0x6f, 0x98, 0xac, 0x77, 0x74, 0xbf, 0x52, 0xa8,
	0x7d, 0x20, 0xbd, 0x68, 0x3c, 0x4a, 0x1d, 0x86, 0x21, 0x49, 0xa0, 0x7f, 0x68, 0x7c, 0xb2, 0x94,
	0xa3, 0x73, 0x64, 0x25, 0xbe, 0x96, 0xe8, 0x7c, 0x72, 0x05, 0x97, 0x7f, 0x68, 0x9c, 0x21, 0xed,
	0x30, 0xf9, 0x62, 0xd0, 0xae, 0xb7, 0x58, 0xc9, 0xdc, 0xc6, 0xca, 0xef, 0xe0, 0xe4, 0x65, 0x63,
	0x99, 0xd9, 0xc0, 0x62, 0xd6, 0x6f, 0x0e, 0xa2, 0x61, 0x5b, 0x98, 0x4c, 0xec, 0xc5, 0x79, 0x92,
	0xc7, 0x5b, 0xe9, 0xd6, 0x7d, 0x01, 0x91, 0x26, 0x9d, 0xe3, 0xac, 0xb0, 0x54, 0x9a, 0xb8, 0xd1,
	0x67, 0x83, 0x96, 0x84, 0x1a, 0x3d, 0xac, 0x09, 0xef, 0xc0, 0xbf, 0x7a, 0x8a, 0x9b, 0xf5, 0x2a,
	0x0c, 0xfc, 0x06, 0xfe, 0x5b, 0x2c, 0xaa, 0x9c, 0xb8, 0x55, 0xe1, 0x68, 0x78, 0xba, 0x3e, 0x4a,
	0xd6, 0x64, 0x6a, 0x30, 0x57, 0x0b, 0x85, 0x56, 0x6e, 0x24, 0x49, 0x07, 0xf8, 0xfe, 0xb5, 0x43,
	0x9b, 0xe1, 0x33, 0x9c, 0x1f, 0x56, 0x9e, 0xa2, 0x7d, 0x53, 0x55, 0xfa, 0x2d, 0xc0, 0x8f, 0x81,
	0x9f, 0xed, 0x6a, 0xec, 0xf7, 0xee, 0x75, 0x0f, 0x71, 0xc8, 0x1d, 0x3d, 0xc2, 0x35, 0xd9, 0x42,
	0xa4, 0x26, 0xcd, 0x97, 0x28, 0x96, 0xe9, 0x9c, 0xc8, 0x88, 0x65, 0xb6, 0xfb, 0x8f, 0xac, 0x5c,
	0x88, 0x02, 0x35, 0xda, 0xca, 0x38, 0x1f, 0x75, 0x7f, 0x79, 0x76, 0x4f, 0x6e, 0xcc, 0x3e, 0x18,
	0xfb, 0x64, 0xec, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xa7, 0x73, 0x73, 0xf4, 0x01, 0x00, 0x00,
}
