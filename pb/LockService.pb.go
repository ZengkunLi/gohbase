// Code generated by protoc-gen-go.
// source: LockService.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LockType int32

const (
	LockType_EXCLUSIVE LockType = 1
	LockType_SHARED    LockType = 2
)

var LockType_name = map[int32]string{
	1: "EXCLUSIVE",
	2: "SHARED",
}
var LockType_value = map[string]int32{
	"EXCLUSIVE": 1,
	"SHARED":    2,
}

func (x LockType) Enum() *LockType {
	p := new(LockType)
	*p = x
	return p
}
func (x LockType) String() string {
	return proto.EnumName(LockType_name, int32(x))
}
func (x *LockType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LockType_value, data, "LockType")
	if err != nil {
		return err
	}
	*x = LockType(value)
	return nil
}
func (LockType) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_SERVER    ResourceType = 1
	ResourceType_RESOURCE_TYPE_NAMESPACE ResourceType = 2
	ResourceType_RESOURCE_TYPE_TABLE     ResourceType = 3
	ResourceType_RESOURCE_TYPE_REGION    ResourceType = 4
)

var ResourceType_name = map[int32]string{
	1: "RESOURCE_TYPE_SERVER",
	2: "RESOURCE_TYPE_NAMESPACE",
	3: "RESOURCE_TYPE_TABLE",
	4: "RESOURCE_TYPE_REGION",
}
var ResourceType_value = map[string]int32{
	"RESOURCE_TYPE_SERVER":    1,
	"RESOURCE_TYPE_NAMESPACE": 2,
	"RESOURCE_TYPE_TABLE":     3,
	"RESOURCE_TYPE_REGION":    4,
}

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}
func (x ResourceType) String() string {
	return proto.EnumName(ResourceType_name, int32(x))
}
func (x *ResourceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResourceType_value, data, "ResourceType")
	if err != nil {
		return err
	}
	*x = ResourceType(value)
	return nil
}
func (ResourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

type LockHeartbeatResponse_LockStatus int32

const (
	LockHeartbeatResponse_UNLOCKED LockHeartbeatResponse_LockStatus = 1
	LockHeartbeatResponse_LOCKED   LockHeartbeatResponse_LockStatus = 2
)

var LockHeartbeatResponse_LockStatus_name = map[int32]string{
	1: "UNLOCKED",
	2: "LOCKED",
}
var LockHeartbeatResponse_LockStatus_value = map[string]int32{
	"UNLOCKED": 1,
	"LOCKED":   2,
}

func (x LockHeartbeatResponse_LockStatus) Enum() *LockHeartbeatResponse_LockStatus {
	p := new(LockHeartbeatResponse_LockStatus)
	*p = x
	return p
}
func (x LockHeartbeatResponse_LockStatus) String() string {
	return proto.EnumName(LockHeartbeatResponse_LockStatus_name, int32(x))
}
func (x *LockHeartbeatResponse_LockStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LockHeartbeatResponse_LockStatus_value, data, "LockHeartbeatResponse_LockStatus")
	if err != nil {
		return err
	}
	*x = LockHeartbeatResponse_LockStatus(value)
	return nil
}
func (LockHeartbeatResponse_LockStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor15, []int{3, 0}
}

type LockRequest struct {
	LockType         *LockType     `protobuf:"varint,1,req,name=lock_type,json=lockType,enum=pb.LockType" json:"lock_type,omitempty"`
	Namespace        *string       `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	TableName        *TableName    `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	RegionInfo       []*RegionInfo `protobuf:"bytes,4,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	Description      *string       `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	NonceGroup       *uint64       `protobuf:"varint,6,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64       `protobuf:"varint,7,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *LockRequest) Reset()                    { *m = LockRequest{} }
func (m *LockRequest) String() string            { return proto.CompactTextString(m) }
func (*LockRequest) ProtoMessage()               {}
func (*LockRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

const Default_LockRequest_NonceGroup uint64 = 0
const Default_LockRequest_Nonce uint64 = 0

func (m *LockRequest) GetLockType() LockType {
	if m != nil && m.LockType != nil {
		return *m.LockType
	}
	return LockType_EXCLUSIVE
}

func (m *LockRequest) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *LockRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *LockRequest) GetRegionInfo() []*RegionInfo {
	if m != nil {
		return m.RegionInfo
	}
	return nil
}

func (m *LockRequest) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *LockRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_LockRequest_NonceGroup
}

func (m *LockRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_LockRequest_Nonce
}

type LockResponse struct {
	ProcId           *uint64 `protobuf:"varint,1,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LockResponse) Reset()                    { *m = LockResponse{} }
func (m *LockResponse) String() string            { return proto.CompactTextString(m) }
func (*LockResponse) ProtoMessage()               {}
func (*LockResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *LockResponse) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

type LockHeartbeatRequest struct {
	ProcId           *uint64 `protobuf:"varint,1,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
	KeepAlive        *bool   `protobuf:"varint,2,opt,name=keep_alive,json=keepAlive,def=1" json:"keep_alive,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LockHeartbeatRequest) Reset()                    { *m = LockHeartbeatRequest{} }
func (m *LockHeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*LockHeartbeatRequest) ProtoMessage()               {}
func (*LockHeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

const Default_LockHeartbeatRequest_KeepAlive bool = true

func (m *LockHeartbeatRequest) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

func (m *LockHeartbeatRequest) GetKeepAlive() bool {
	if m != nil && m.KeepAlive != nil {
		return *m.KeepAlive
	}
	return Default_LockHeartbeatRequest_KeepAlive
}

type LockHeartbeatResponse struct {
	LockStatus *LockHeartbeatResponse_LockStatus `protobuf:"varint,1,req,name=lock_status,json=lockStatus,enum=pb.LockHeartbeatResponse_LockStatus" json:"lock_status,omitempty"`
	// Timeout of lock (if locked).
	TimeoutMs        *uint32 `protobuf:"varint,2,opt,name=timeout_ms,json=timeoutMs" json:"timeout_ms,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LockHeartbeatResponse) Reset()                    { *m = LockHeartbeatResponse{} }
func (m *LockHeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*LockHeartbeatResponse) ProtoMessage()               {}
func (*LockHeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *LockHeartbeatResponse) GetLockStatus() LockHeartbeatResponse_LockStatus {
	if m != nil && m.LockStatus != nil {
		return *m.LockStatus
	}
	return LockHeartbeatResponse_UNLOCKED
}

func (m *LockHeartbeatResponse) GetTimeoutMs() uint32 {
	if m != nil && m.TimeoutMs != nil {
		return *m.TimeoutMs
	}
	return 0
}

type LockProcedureData struct {
	LockType         *LockType     `protobuf:"varint,1,req,name=lock_type,json=lockType,enum=pb.LockType" json:"lock_type,omitempty"`
	Namespace        *string       `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	TableName        *TableName    `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	RegionInfo       []*RegionInfo `protobuf:"bytes,4,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	Description      *string       `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	IsMasterLock     *bool         `protobuf:"varint,6,opt,name=is_master_lock,json=isMasterLock,def=0" json:"is_master_lock,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *LockProcedureData) Reset()                    { *m = LockProcedureData{} }
func (m *LockProcedureData) String() string            { return proto.CompactTextString(m) }
func (*LockProcedureData) ProtoMessage()               {}
func (*LockProcedureData) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

const Default_LockProcedureData_IsMasterLock bool = false

func (m *LockProcedureData) GetLockType() LockType {
	if m != nil && m.LockType != nil {
		return *m.LockType
	}
	return LockType_EXCLUSIVE
}

func (m *LockProcedureData) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *LockProcedureData) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *LockProcedureData) GetRegionInfo() []*RegionInfo {
	if m != nil {
		return m.RegionInfo
	}
	return nil
}

func (m *LockProcedureData) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *LockProcedureData) GetIsMasterLock() bool {
	if m != nil && m.IsMasterLock != nil {
		return *m.IsMasterLock
	}
	return Default_LockProcedureData_IsMasterLock
}

type WaitingProcedure struct {
	LockType         *LockType  `protobuf:"varint,1,req,name=lock_type,json=lockType,enum=pb.LockType" json:"lock_type,omitempty"`
	Procedure        *Procedure `protobuf:"bytes,2,req,name=procedure" json:"procedure,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *WaitingProcedure) Reset()                    { *m = WaitingProcedure{} }
func (m *WaitingProcedure) String() string            { return proto.CompactTextString(m) }
func (*WaitingProcedure) ProtoMessage()               {}
func (*WaitingProcedure) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *WaitingProcedure) GetLockType() LockType {
	if m != nil && m.LockType != nil {
		return *m.LockType
	}
	return LockType_EXCLUSIVE
}

func (m *WaitingProcedure) GetProcedure() *Procedure {
	if m != nil {
		return m.Procedure
	}
	return nil
}

type LockInfo struct {
	ResourceType                *ResourceType       `protobuf:"varint,1,req,name=resource_type,json=resourceType,enum=pb.ResourceType" json:"resource_type,omitempty"`
	ResourceName                *string             `protobuf:"bytes,2,opt,name=resource_name,json=resourceName" json:"resource_name,omitempty"`
	LockType                    *LockType           `protobuf:"varint,3,req,name=lock_type,json=lockType,enum=pb.LockType" json:"lock_type,omitempty"`
	ExclusiveLockOwnerProcedure *Procedure          `protobuf:"bytes,4,opt,name=exclusive_lock_owner_procedure,json=exclusiveLockOwnerProcedure" json:"exclusive_lock_owner_procedure,omitempty"`
	SharedLockCount             *int32              `protobuf:"varint,5,opt,name=shared_lock_count,json=sharedLockCount" json:"shared_lock_count,omitempty"`
	WaitingProcedures           []*WaitingProcedure `protobuf:"bytes,6,rep,name=waitingProcedures" json:"waitingProcedures,omitempty"`
	XXX_unrecognized            []byte              `json:"-"`
}

func (m *LockInfo) Reset()                    { *m = LockInfo{} }
func (m *LockInfo) String() string            { return proto.CompactTextString(m) }
func (*LockInfo) ProtoMessage()               {}
func (*LockInfo) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *LockInfo) GetResourceType() ResourceType {
	if m != nil && m.ResourceType != nil {
		return *m.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_SERVER
}

func (m *LockInfo) GetResourceName() string {
	if m != nil && m.ResourceName != nil {
		return *m.ResourceName
	}
	return ""
}

func (m *LockInfo) GetLockType() LockType {
	if m != nil && m.LockType != nil {
		return *m.LockType
	}
	return LockType_EXCLUSIVE
}

func (m *LockInfo) GetExclusiveLockOwnerProcedure() *Procedure {
	if m != nil {
		return m.ExclusiveLockOwnerProcedure
	}
	return nil
}

func (m *LockInfo) GetSharedLockCount() int32 {
	if m != nil && m.SharedLockCount != nil {
		return *m.SharedLockCount
	}
	return 0
}

func (m *LockInfo) GetWaitingProcedures() []*WaitingProcedure {
	if m != nil {
		return m.WaitingProcedures
	}
	return nil
}

func init() {
	proto.RegisterType((*LockRequest)(nil), "pb.LockRequest")
	proto.RegisterType((*LockResponse)(nil), "pb.LockResponse")
	proto.RegisterType((*LockHeartbeatRequest)(nil), "pb.LockHeartbeatRequest")
	proto.RegisterType((*LockHeartbeatResponse)(nil), "pb.LockHeartbeatResponse")
	proto.RegisterType((*LockProcedureData)(nil), "pb.LockProcedureData")
	proto.RegisterType((*WaitingProcedure)(nil), "pb.WaitingProcedure")
	proto.RegisterType((*LockInfo)(nil), "pb.LockInfo")
	proto.RegisterEnum("pb.LockType", LockType_name, LockType_value)
	proto.RegisterEnum("pb.ResourceType", ResourceType_name, ResourceType_value)
	proto.RegisterEnum("pb.LockHeartbeatResponse_LockStatus", LockHeartbeatResponse_LockStatus_name, LockHeartbeatResponse_LockStatus_value)
}

var fileDescriptor15 = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0xdd, 0xb4, 0x9b, 0x1c, 0x27, 0x6d, 0x3a, 0x14, 0xad, 0xe9, 0x02, 0xaa, 0xcc, 0xdf,
	0xd2, 0x45, 0x61, 0xa9, 0xc4, 0x4d, 0xef, 0x92, 0xd4, 0xda, 0x44, 0xa4, 0x49, 0x34, 0x49, 0x17,
	0xb8, 0xb2, 0x26, 0xf6, 0x34, 0x31, 0x9b, 0x78, 0xcc, 0xcc, 0x78, 0x77, 0x79, 0x00, 0x24, 0xc4,
	0x35, 0x0f, 0xc0, 0x0d, 0x8f, 0xc4, 0xfb, 0x30, 0x33, 0x76, 0xe2, 0xa4, 0xa5, 0x48, 0xdc, 0xee,
	0xdd, 0x9c, 0xef, 0xfc, 0x8c, 0xcf, 0xf7, 0x1d, 0x9f, 0x81, 0xe3, 0x01, 0x0b, 0x5f, 0x4d, 0x28,
	0x7f, 0x1d, 0x87, 0xb4, 0x95, 0x72, 0x26, 0x19, 0xb2, 0xd3, 0xd9, 0xa9, 0xd3, 0xeb, 0x10, 0x51,
	0x00, 0xa7, 0x47, 0x63, 0xce, 0x42, 0x1a, 0x65, 0xbc, 0x00, 0xbc, 0x3f, 0x6c, 0x70, 0x74, 0x1e,
	0xa6, 0x3f, 0x67, 0x54, 0x48, 0xf4, 0x25, 0xd4, 0x96, 0xca, 0x0c, 0xe4, 0x2f, 0x29, 0x75, 0xad,
	0x33, 0xfb, 0xe9, 0xe1, 0x45, 0xbd, 0x95, 0xce, 0x5a, 0x3a, 0x66, 0xaa, 0x30, 0x5c, 0x5d, 0x16,
	0x27, 0xf4, 0x21, 0xd4, 0x12, 0xb2, 0xa2, 0x22, 0x25, 0x21, 0x75, 0xed, 0x33, 0xeb, 0x69, 0x0d,
	0x97, 0x00, 0xfa, 0x0a, 0x40, 0x92, 0xd9, 0x92, 0x06, 0x1a, 0x72, 0xf7, 0x94, 0xdb, 0xb9, 0x68,
	0xe8, 0x4a, 0x53, 0x8d, 0x0e, 0x15, 0x88, 0x6b, 0x72, 0x7d, 0x44, 0x5f, 0x83, 0xc3, 0xe9, 0x3c,
	0x66, 0x49, 0x10, 0x27, 0xb7, 0xcc, 0xad, 0x9c, 0xed, 0xa9, 0xf0, 0x43, 0x1d, 0x8e, 0x0d, 0xdc,
	0x57, 0x28, 0x06, 0xbe, 0x39, 0xa3, 0x33, 0x70, 0x22, 0x2a, 0x42, 0x1e, 0xa7, 0x52, 0x41, 0xee,
	0xbe, 0xb9, 0x7e, 0x1b, 0x42, 0x1e, 0x38, 0x09, 0x4b, 0x42, 0x1a, 0xcc, 0x39, 0xcb, 0x52, 0xf7,
	0x40, 0x45, 0x54, 0x2e, 0xad, 0xe7, 0x18, 0x0c, 0xfa, 0x42, 0x83, 0xe8, 0x31, 0xec, 0x1b, 0xcb,
	0x7d, 0xb4, 0xf6, 0xe6, 0xb6, 0xf7, 0x05, 0xd4, 0x73, 0x56, 0x44, 0xca, 0x12, 0x41, 0x55, 0xe0,
	0x23, 0xc5, 0x57, 0x18, 0xc4, 0x91, 0x21, 0xa5, 0x82, 0x0f, 0xb4, 0xd9, 0x8f, 0xbc, 0x29, 0x9c,
	0xe8, 0xc0, 0x1e, 0x25, 0x5c, 0xce, 0x28, 0x91, 0x6b, 0x1e, 0x1f, 0x4a, 0x40, 0x9f, 0x00, 0xbc,
	0xa2, 0x34, 0x0d, 0xc8, 0x32, 0x7e, 0x9d, 0xd3, 0x56, 0xbd, 0xac, 0x48, 0x9e, 0x29, 0x3a, 0x34,
	0xde, 0xd6, 0xb0, 0xf7, 0x97, 0x05, 0xef, 0xdf, 0x29, 0x5b, 0x7c, 0x88, 0x0f, 0x8e, 0xd1, 0x47,
	0x48, 0x22, 0x33, 0x51, 0x28, 0xf4, 0xe9, 0x5a, 0xa1, 0x7b, 0xf1, 0x06, 0x9d, 0x98, 0x58, 0x0c,
	0xcb, 0xcd, 0x19, 0x7d, 0xa4, 0xd4, 0x89, 0x57, 0x94, 0x65, 0x32, 0x58, 0x09, 0xf3, 0x15, 0x0d,
	0x25, 0x47, 0x8e, 0x5c, 0x0b, 0xef, 0x73, 0x80, 0x32, 0x11, 0xd5, 0xa1, 0x7a, 0x33, 0x1c, 0x8c,
	0xba, 0xdf, 0xf9, 0x57, 0x4d, 0x0b, 0x01, 0x1c, 0x14, 0x67, 0xdb, 0xfb, 0xdd, 0xce, 0xa7, 0x6e,
	0x33, 0x55, 0x57, 0x44, 0x92, 0x77, 0x68, 0x86, 0x9e, 0xc1, 0x61, 0x2c, 0x82, 0x15, 0x11, 0x92,
	0xf2, 0x40, 0x7f, 0xb4, 0x19, 0xa3, 0xea, 0xe5, 0xfe, 0x2d, 0x59, 0x0a, 0x8a, 0xeb, 0xb1, 0xb8,
	0x36, 0x3e, 0xdd, 0x99, 0xf7, 0x13, 0x34, 0xbf, 0x27, 0xb1, 0x8c, 0x93, 0xf9, 0x86, 0x8e, 0xff,
	0x43, 0xc5, 0x33, 0xa8, 0xa5, 0xeb, 0x3c, 0x45, 0x85, 0xbd, 0xee, 0x75, 0x53, 0x0c, 0x97, 0x7e,
	0xef, 0x6f, 0x1b, 0xaa, 0xba, 0x86, 0xe9, 0xe3, 0x5b, 0x68, 0x70, 0x2a, 0x58, 0xc6, 0xd5, 0xb0,
	0x6f, 0x5d, 0xd4, 0xcc, 0x5b, 0xcf, 0x1d, 0xe6, 0xb2, 0x3a, 0xdf, 0xb2, 0xd4, 0x24, 0x96, 0x69,
	0x86, 0xe0, 0x9c, 0xff, 0x4d, 0x90, 0x21, 0x75, 0xa7, 0x81, 0xbd, 0xff, 0x6c, 0x00, 0xc3, 0xc7,
	0xf4, 0x6d, 0xb8, 0xcc, 0x84, 0x9a, 0x60, 0x43, 0x56, 0xc0, 0xde, 0x24, 0x8a, 0xb7, 0xb2, 0xab,
	0x4a, 0xa9, 0x60, 0xd9, 0xd5, 0x93, 0x4d, 0x92, 0xae, 0x39, 0xd2, 0x29, 0x25, 0x7f, 0xe7, 0x70,
	0x2c, 0x16, 0x84, 0xd3, 0x28, 0x2f, 0x18, 0xb2, 0x2c, 0x91, 0x46, 0xa8, 0x7d, 0x7c, 0x94, 0x3b,
	0x74, 0x52, 0x57, 0xc3, 0xa8, 0x03, 0xc7, 0x6f, 0xee, 0xf0, 0x2f, 0x94, 0x5e, 0x7a, 0x0a, 0x4e,
	0xf4, 0x95, 0x77, 0xc5, 0xc1, 0xf7, 0xc3, 0xcf, 0x3f, 0xcb, 0x69, 0x35, 0xfd, 0x34, 0xa0, 0xe6,
	0xff, 0xd0, 0x1d, 0xdc, 0x4c, 0xfa, 0x2f, 0xfd, 0x7c, 0xee, 0x27, 0xbd, 0x36, 0xd6, 0x73, 0x7f,
	0xfe, 0x16, 0xea, 0xdb, 0xc4, 0x22, 0x17, 0x4e, 0xb0, 0x3f, 0x19, 0xdd, 0xe0, 0xae, 0x1f, 0x4c,
	0x7f, 0x1c, 0xfb, 0xc1, 0xc4, 0xc7, 0x2f, 0x7d, 0xac, 0xb2, 0x9e, 0xc0, 0xe3, 0x5d, 0xcf, 0xb0,
	0x7d, 0xed, 0x4f, 0xc6, 0xed, 0xae, 0xdf, 0xb4, 0xd5, 0x92, 0x78, 0x6f, 0xd7, 0x39, 0x6d, 0x77,
	0x06, 0x7e, 0x73, 0xef, 0x7e, 0x3d, 0xec, 0xbf, 0xe8, 0x8f, 0x86, 0xcd, 0xca, 0xc5, 0xaf, 0x56,
	0xbe, 0xaf, 0x8b, 0x3d, 0x8f, 0x9e, 0x83, 0x53, 0xac, 0x1c, 0x8d, 0xa2, 0xa3, 0xb5, 0x36, 0x05,
	0x78, 0xda, 0x2c, 0x81, 0x62, 0x83, 0x5c, 0x41, 0x63, 0x67, 0x55, 0x20, 0xf7, 0x5f, 0xb6, 0x47,
	0x9e, 0xfc, 0xc1, 0x83, 0x7b, 0xa5, 0x33, 0x84, 0x6f, 0x18, 0x9f, 0xb7, 0x88, 0xfa, 0x4f, 0x17,
	0xb4, 0xb5, 0x20, 0x11, 0x63, 0x69, 0x6b, 0x31, 0xd3, 0x2f, 0x8d, 0xd2, 0x25, 0xa2, 0x51, 0xfe,
	0xbe, 0xcc, 0xb2, 0xdb, 0xd6, 0x9c, 0x2a, 0x49, 0x89, 0xa4, 0x51, 0x67, 0xfb, 0x85, 0x1a, 0x6b,
	0xb7, 0xe8, 0x59, 0xbf, 0x59, 0xd6, 0x9f, 0x96, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea,
	0xa1, 0xca, 0xb9, 0xbd, 0x06, 0x00, 0x00,
}
