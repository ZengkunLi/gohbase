// Code generated by protoc-gen-go.
// source: Aggregate.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AggregateRequest struct {
	// * The request passed to the AggregateService consists of three parts
	//  (1) the (canonical) classname of the ColumnInterpreter implementation
	//  (2) the Scan query
	//  (3) any bytes required to construct the ColumnInterpreter object
	//      properly
	InterpreterClassName     *string `protobuf:"bytes,1,req,name=interpreter_class_name,json=interpreterClassName" json:"interpreter_class_name,omitempty"`
	Scan                     *Scan   `protobuf:"bytes,2,req,name=scan" json:"scan,omitempty"`
	InterpreterSpecificBytes []byte  `protobuf:"bytes,3,opt,name=interpreter_specific_bytes,json=interpreterSpecificBytes" json:"interpreter_specific_bytes,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *AggregateRequest) Reset()                    { *m = AggregateRequest{} }
func (m *AggregateRequest) String() string            { return proto.CompactTextString(m) }
func (*AggregateRequest) ProtoMessage()               {}
func (*AggregateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *AggregateRequest) GetInterpreterClassName() string {
	if m != nil && m.InterpreterClassName != nil {
		return *m.InterpreterClassName
	}
	return ""
}

func (m *AggregateRequest) GetScan() *Scan {
	if m != nil {
		return m.Scan
	}
	return nil
}

func (m *AggregateRequest) GetInterpreterSpecificBytes() []byte {
	if m != nil {
		return m.InterpreterSpecificBytes
	}
	return nil
}

type AggregateResponse struct {
	// *
	// The AggregateService methods all have a response that either is a Pair
	// or a simple object. When it is a Pair both first_part and second_part
	// have defined values (and the second_part is not present in the response
	// when the response is not a pair). Refer to the AggregateImplementation
	// class for an overview of the AggregateResponse object constructions.
	FirstPart        [][]byte `protobuf:"bytes,1,rep,name=first_part,json=firstPart" json:"first_part,omitempty"`
	SecondPart       []byte   `protobuf:"bytes,2,opt,name=second_part,json=secondPart" json:"second_part,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AggregateResponse) Reset()                    { *m = AggregateResponse{} }
func (m *AggregateResponse) String() string            { return proto.CompactTextString(m) }
func (*AggregateResponse) ProtoMessage()               {}
func (*AggregateResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *AggregateResponse) GetFirstPart() [][]byte {
	if m != nil {
		return m.FirstPart
	}
	return nil
}

func (m *AggregateResponse) GetSecondPart() []byte {
	if m != nil {
		return m.SecondPart
	}
	return nil
}

func init() {
	proto.RegisterType((*AggregateRequest)(nil), "pb.AggregateRequest")
	proto.RegisterType((*AggregateResponse)(nil), "pb.AggregateResponse")
}

var fileDescriptor2 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0x4a, 0x2b, 0x31,
	0x14, 0x26, 0xd3, 0xcb, 0xe5, 0x36, 0x2d, 0x5c, 0x0d, 0x55, 0x86, 0xa2, 0x58, 0xba, 0x2a, 0x2e,
	0xb2, 0x28, 0x0a, 0x2e, 0xdc, 0xb4, 0x45, 0x74, 0xd3, 0x52, 0x66, 0x1e, 0x60, 0xc8, 0x64, 0x4e,
	0xa7, 0x81, 0x36, 0x89, 0x49, 0x5a, 0xf5, 0x0d, 0x7c, 0x05, 0x77, 0x2e, 0x7c, 0x50, 0x33, 0x9d,
	0x41, 0x87, 0xee, 0xda, 0x4d, 0x20, 0xdf, 0xcf, 0x39, 0xdf, 0x39, 0x1c, 0xfc, 0x7f, 0x94, 0xe7,
	0x06, 0x72, 0xe6, 0x80, 0x6a, 0xa3, 0x9c, 0x22, 0x81, 0x4e, 0xbb, 0xed, 0xc9, 0x4a, 0x80, 0x74,
	0x25, 0xd2, 0xff, 0x42, 0xf8, 0xe4, 0x47, 0x15, 0xc1, 0xf3, 0x06, 0xac, 0x23, 0x37, 0xf8, 0x5c,
	0x48, 0x07, 0x46, 0x1b, 0xf0, 0x6f, 0xc2, 0x57, 0xcc, 0xda, 0x44, 0xb2, 0x35, 0x84, 0xa8, 0x17,
	0x0c, 0x9a, 0x51, 0xa7, 0xc6, 0x4e, 0x0a, 0x72, 0xe6, 0x39, 0x72, 0x81, 0xff, 0x58, 0xce, 0x64,
	0x18, 0x78, 0x4d, 0x6b, 0xf8, 0x8f, 0xea, 0x94, 0xc6, 0xfe, 0x1f, 0xed, 0x50, 0x72, 0x8f, 0xbb,
	0xf5, 0x9a, 0x56, 0x03, 0x17, 0x0b, 0xc1, 0x93, 0xf4, 0xcd, 0x81, 0x0d, 0x1b, 0x3d, 0x34, 0x68,
	0x47, 0x61, 0x4d, 0x11, 0x57, 0x82, 0x71, 0xc1, 0xf7, 0x63, 0x7c, 0x5a, 0x4b, 0x69, 0xb5, 0x92,
	0x16, 0xc8, 0x25, 0xc6, 0x0b, 0x61, 0xac, 0x4b, 0x34, 0x33, 0xce, 0x47, 0x6b, 0xf8, 0x12, 0xcd,
	0x1d, 0x32, 0xf7, 0x00, 0xb9, 0xc2, 0x2d, 0x0b, 0x5c, 0xc9, 0xac, 0xe4, 0x83, 0x5d, 0x0b, 0x5c,
	0x42, 0x85, 0x60, 0xf8, 0xd1, 0xa8, 0xcd, 0x1e, 0x83, 0xd9, 0x0a, 0x0e, 0xe4, 0x16, 0xff, 0x7d,
	0x04, 0x37, 0x65, 0xaf, 0xa4, 0x53, 0x4c, 0xb0, 0xbf, 0x9b, 0xee, 0xd9, 0x1e, 0x5a, 0x65, 0xa9,
	0x6c, 0x42, 0x1e, 0x63, 0x8b, 0x37, 0xeb, 0xc3, 0x6c, 0x77, 0xb8, 0xe9, 0x6d, 0x91, 0x7a, 0x99,
	0x1d, 0xea, 0x2c, 0x1b, 0x8e, 0xb6, 0xf9, 0x51, 0x39, 0x5d, 0x76, 0x4c, 0xce, 0x29, 0x64, 0x82,
	0x1d, 0xb6, 0x98, 0xf1, 0x03, 0xbe, 0x56, 0x26, 0xa7, 0x4c, 0x33, 0xbe, 0x04, 0xba, 0x64, 0x99,
	0x52, 0x9a, 0x2e, 0x53, 0x66, 0xab, 0x53, 0x4e, 0x37, 0x0b, 0x9a, 0x83, 0x04, 0xe3, 0x4d, 0xd9,
	0xf8, 0xf7, 0xd0, 0xe7, 0x05, 0x69, 0x9f, 0xd0, 0x3b, 0x42, 0x9f, 0x08, 0x7d, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xe3, 0x6b, 0x4e, 0xc6, 0x02, 0x03, 0x00, 0x00,
}
