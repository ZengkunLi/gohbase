// Code generated by protoc-gen-go.
// source: HFile.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Map of name/values
type FileInfoProto struct {
	MapEntry         []*BytesBytesPair `protobuf:"bytes,1,rep,name=map_entry,json=mapEntry" json:"map_entry,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FileInfoProto) Reset()                    { *m = FileInfoProto{} }
func (m *FileInfoProto) String() string            { return proto.CompactTextString(m) }
func (*FileInfoProto) ProtoMessage()               {}
func (*FileInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *FileInfoProto) GetMapEntry() []*BytesBytesPair {
	if m != nil {
		return m.MapEntry
	}
	return nil
}

// HFile file trailer
type FileTrailerProto struct {
	FileInfoOffset            *uint64 `protobuf:"varint,1,opt,name=file_info_offset,json=fileInfoOffset" json:"file_info_offset,omitempty"`
	LoadOnOpenDataOffset      *uint64 `protobuf:"varint,2,opt,name=load_on_open_data_offset,json=loadOnOpenDataOffset" json:"load_on_open_data_offset,omitempty"`
	UncompressedDataIndexSize *uint64 `protobuf:"varint,3,opt,name=uncompressed_data_index_size,json=uncompressedDataIndexSize" json:"uncompressed_data_index_size,omitempty"`
	TotalUncompressedBytes    *uint64 `protobuf:"varint,4,opt,name=total_uncompressed_bytes,json=totalUncompressedBytes" json:"total_uncompressed_bytes,omitempty"`
	DataIndexCount            *uint32 `protobuf:"varint,5,opt,name=data_index_count,json=dataIndexCount" json:"data_index_count,omitempty"`
	MetaIndexCount            *uint32 `protobuf:"varint,6,opt,name=meta_index_count,json=metaIndexCount" json:"meta_index_count,omitempty"`
	EntryCount                *uint64 `protobuf:"varint,7,opt,name=entry_count,json=entryCount" json:"entry_count,omitempty"`
	NumDataIndexLevels        *uint32 `protobuf:"varint,8,opt,name=num_data_index_levels,json=numDataIndexLevels" json:"num_data_index_levels,omitempty"`
	FirstDataBlockOffset      *uint64 `protobuf:"varint,9,opt,name=first_data_block_offset,json=firstDataBlockOffset" json:"first_data_block_offset,omitempty"`
	LastDataBlockOffset       *uint64 `protobuf:"varint,10,opt,name=last_data_block_offset,json=lastDataBlockOffset" json:"last_data_block_offset,omitempty"`
	ComparatorClassName       *string `protobuf:"bytes,11,opt,name=comparator_class_name,json=comparatorClassName" json:"comparator_class_name,omitempty"`
	CompressionCodec          *uint32 `protobuf:"varint,12,opt,name=compression_codec,json=compressionCodec" json:"compression_codec,omitempty"`
	EncryptionKey             []byte  `protobuf:"bytes,13,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	XXX_unrecognized          []byte  `json:"-"`
}

func (m *FileTrailerProto) Reset()                    { *m = FileTrailerProto{} }
func (m *FileTrailerProto) String() string            { return proto.CompactTextString(m) }
func (*FileTrailerProto) ProtoMessage()               {}
func (*FileTrailerProto) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *FileTrailerProto) GetFileInfoOffset() uint64 {
	if m != nil && m.FileInfoOffset != nil {
		return *m.FileInfoOffset
	}
	return 0
}

func (m *FileTrailerProto) GetLoadOnOpenDataOffset() uint64 {
	if m != nil && m.LoadOnOpenDataOffset != nil {
		return *m.LoadOnOpenDataOffset
	}
	return 0
}

func (m *FileTrailerProto) GetUncompressedDataIndexSize() uint64 {
	if m != nil && m.UncompressedDataIndexSize != nil {
		return *m.UncompressedDataIndexSize
	}
	return 0
}

func (m *FileTrailerProto) GetTotalUncompressedBytes() uint64 {
	if m != nil && m.TotalUncompressedBytes != nil {
		return *m.TotalUncompressedBytes
	}
	return 0
}

func (m *FileTrailerProto) GetDataIndexCount() uint32 {
	if m != nil && m.DataIndexCount != nil {
		return *m.DataIndexCount
	}
	return 0
}

func (m *FileTrailerProto) GetMetaIndexCount() uint32 {
	if m != nil && m.MetaIndexCount != nil {
		return *m.MetaIndexCount
	}
	return 0
}

func (m *FileTrailerProto) GetEntryCount() uint64 {
	if m != nil && m.EntryCount != nil {
		return *m.EntryCount
	}
	return 0
}

func (m *FileTrailerProto) GetNumDataIndexLevels() uint32 {
	if m != nil && m.NumDataIndexLevels != nil {
		return *m.NumDataIndexLevels
	}
	return 0
}

func (m *FileTrailerProto) GetFirstDataBlockOffset() uint64 {
	if m != nil && m.FirstDataBlockOffset != nil {
		return *m.FirstDataBlockOffset
	}
	return 0
}

func (m *FileTrailerProto) GetLastDataBlockOffset() uint64 {
	if m != nil && m.LastDataBlockOffset != nil {
		return *m.LastDataBlockOffset
	}
	return 0
}

func (m *FileTrailerProto) GetComparatorClassName() string {
	if m != nil && m.ComparatorClassName != nil {
		return *m.ComparatorClassName
	}
	return ""
}

func (m *FileTrailerProto) GetCompressionCodec() uint32 {
	if m != nil && m.CompressionCodec != nil {
		return *m.CompressionCodec
	}
	return 0
}

func (m *FileTrailerProto) GetEncryptionKey() []byte {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func init() {
	proto.RegisterType((*FileInfoProto)(nil), "pb.FileInfoProto")
	proto.RegisterType((*FileTrailerProto)(nil), "pb.FileTrailerProto")
}

var fileDescriptor13 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x93, 0x6f, 0x6b, 0xd4, 0x40,
	0x10, 0xc6, 0x49, 0xff, 0x68, 0xbb, 0xe9, 0x1d, 0x67, 0x6a, 0xeb, 0x2a, 0x82, 0x52, 0x10, 0x0e,
	0x84, 0x48, 0x2b, 0x8a, 0xef, 0x94, 0x3b, 0x95, 0x2b, 0x8a, 0x57, 0xa2, 0xbe, 0x5e, 0x36, 0xc9,
	0xa4, 0x17, 0x9a, 0xec, 0x86, 0xdd, 0x3d, 0x31, 0x7e, 0x02, 0xc1, 0x2f, 0xe1, 0x47, 0x75, 0x66,
	0x93, 0xb3, 0xb1, 0xf8, 0x26, 0xb0, 0xcf, 0xf3, 0x7b, 0x66, 0x77, 0x66, 0x37, 0x2c, 0x5c, 0xbc,
	0x2f, 0x2b, 0x88, 0x1b, 0xa3, 0x9d, 0x8e, 0xb6, 0x9a, 0xf4, 0x41, 0xb8, 0x98, 0x49, 0xdb, 0x0b,
	0x27, 0x6f, 0xd8, 0x88, 0xec, 0x73, 0x55, 0xe8, 0x0b, 0x4f, 0x3c, 0x63, 0xfb, 0xb5, 0x6c, 0x04,
	0x28, 0x67, 0x5a, 0x1e, 0x3c, 0xde, 0x9e, 0x86, 0x67, 0x51, 0xdc, 0xa4, 0xf1, 0xac, 0x75, 0x60,
	0xfd, 0xe7, 0x42, 0x96, 0x26, 0xd9, 0x43, 0xe8, 0x1d, 0x31, 0x27, 0xbf, 0x76, 0xd9, 0x84, 0x4a,
	0x7c, 0x31, 0x12, 0xbf, 0xa6, 0xab, 0x32, 0x65, 0x93, 0x02, 0x57, 0xa2, 0xc4, 0xba, 0x42, 0x17,
	0x85, 0x05, 0x87, 0xc5, 0x82, 0xe9, 0x4e, 0x32, 0x2e, 0xfa, 0xed, 0x96, 0x5e, 0x8d, 0x5e, 0x32,
	0x5e, 0x69, 0x99, 0x0b, 0xad, 0x84, 0x6e, 0x40, 0x89, 0x5c, 0x3a, 0xb9, 0x49, 0x6c, 0xf9, 0xc4,
	0x5d, 0xf2, 0x97, 0x6a, 0x89, 0xee, 0x5b, 0x34, 0xfb, 0xdc, 0x6b, 0xf6, 0x70, 0xad, 0x32, 0x5d,
	0x37, 0x06, 0xac, 0x85, 0xbc, 0xcb, 0x95, 0x2a, 0x87, 0xef, 0xc2, 0x96, 0x3f, 0x80, 0x6f, 0xfb,
	0xec, 0xfd, 0x21, 0x43, 0xe9, 0x73, 0x22, 0x3e, 0x23, 0x10, 0xbd, 0x62, 0xdc, 0x69, 0x27, 0x2b,
	0xf1, 0x4f, 0x99, 0x94, 0x3a, 0xe4, 0x3b, 0x3e, 0x7c, 0xec, 0xfd, 0xaf, 0x03, 0xdb, 0xf7, 0x4f,
	0xcd, 0x0d, 0x76, 0xcb, 0xf4, 0x5a, 0x39, 0xbe, 0x8b, 0x89, 0x51, 0x32, 0xce, 0x37, 0x5b, 0xcc,
	0x49, 0x25, 0xb2, 0x86, 0x1b, 0xe4, 0xad, 0x8e, 0x24, 0x7d, 0x40, 0x3e, 0x62, 0xa1, 0x1f, 0x79,
	0x0f, 0xdd, 0xf6, 0x07, 0x60, 0x5e, 0xea, 0x80, 0x53, 0x76, 0xa4, 0xd6, 0xf5, 0xb0, 0xcd, 0x0a,
	0xbe, 0x41, 0x65, 0xf9, 0x9e, 0xaf, 0x17, 0xa1, 0xf9, 0xb7, 0xbf, 0x8f, 0xde, 0x89, 0x5e, 0xb0,
	0x7b, 0x45, 0x69, 0xac, 0xeb, 0x42, 0x69, 0xa5, 0xb3, 0xab, 0xcd, 0x64, 0xf7, 0xbb, 0xc9, 0x7a,
	0x9b, 0x62, 0x33, 0x32, 0xfb, 0xc9, 0x3e, 0x67, 0xc7, 0x95, 0xfc, 0x6f, 0x8a, 0xf9, 0xd4, 0x21,
	0xb9, 0x37, 0x43, 0x67, 0xec, 0x88, 0xc6, 0x24, 0x8d, 0x74, 0xda, 0x88, 0x0c, 0x11, 0x2b, 0x94,
	0xac, 0x81, 0x87, 0x98, 0xd9, 0x4f, 0x0e, 0xaf, 0xcd, 0x39, 0x79, 0x9f, 0xd0, 0x8a, 0x9e, 0xb2,
	0x3b, 0x9b, 0xd1, 0x96, 0x78, 0xfd, 0x99, 0xce, 0x21, 0xe3, 0x07, 0xbe, 0x9d, 0xc9, 0xc0, 0x98,
	0x93, 0x1e, 0x3d, 0x61, 0x63, 0x50, 0x99, 0x69, 0x1b, 0x47, 0xec, 0x15, 0xb4, 0x7c, 0x84, 0xe4,
	0x41, 0x32, 0xba, 0x56, 0x3f, 0x40, 0x3b, 0x5b, 0xb0, 0x53, 0x6d, 0x2e, 0x63, 0xd9, 0xc8, 0x6c,
	0x05, 0xf1, 0x4a, 0xe6, 0x5a, 0x37, 0xf1, 0x2a, 0xa5, 0x07, 0x6f, 0x71, 0x05, 0x79, 0xf7, 0xee,
	0xd3, 0x75, 0x11, 0x5f, 0x82, 0x02, 0x3c, 0x11, 0xde, 0x6a, 0xf7, 0x8b, 0xf8, 0x97, 0x6b, 0x17,
	0xc1, 0xcf, 0x20, 0xf8, 0x1d, 0x04, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xea, 0x5b, 0xe4,
	0x38, 0x03, 0x00, 0x00,
}
