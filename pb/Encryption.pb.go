// Code generated by protoc-gen-go.
// source: Encryption.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WrappedKey struct {
	Algorithm        *string `protobuf:"bytes,1,req,name=algorithm" json:"algorithm,omitempty"`
	Length           *uint32 `protobuf:"varint,2,req,name=length" json:"length,omitempty"`
	Data             []byte  `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
	Iv               []byte  `protobuf:"bytes,4,opt,name=iv" json:"iv,omitempty"`
	Hash             []byte  `protobuf:"bytes,5,opt,name=hash" json:"hash,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WrappedKey) Reset()                    { *m = WrappedKey{} }
func (m *WrappedKey) String() string            { return proto.CompactTextString(m) }
func (*WrappedKey) ProtoMessage()               {}
func (*WrappedKey) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *WrappedKey) GetAlgorithm() string {
	if m != nil && m.Algorithm != nil {
		return *m.Algorithm
	}
	return ""
}

func (m *WrappedKey) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *WrappedKey) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *WrappedKey) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

func (m *WrappedKey) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*WrappedKey)(nil), "pb.WrappedKey")
}

var fileDescriptor9 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8e, 0xb1, 0x6a, 0xc3, 0x30,
	0x10, 0x86, 0x91, 0xea, 0x16, 0x7c, 0xb4, 0xa5, 0x68, 0x28, 0x1a, 0x3a, 0x98, 0x4e, 0xa5, 0x83,
	0x1e, 0xc2, 0xa5, 0x10, 0xc8, 0x12, 0xbc, 0x64, 0x3e, 0x5b, 0x17, 0xc9, 0xe0, 0x48, 0x42, 0x56,
	0x02, 0xce, 0xd3, 0xe4, 0x51, 0x23, 0x3b, 0x81, 0x64, 0xfb, 0xee, 0xfb, 0x6f, 0xf8, 0xe0, 0xe3,
	0xdf, 0x75, 0x71, 0x0a, 0xa9, 0xf7, 0x4e, 0x85, 0xe8, 0x93, 0x17, 0x3c, 0xb4, 0xdf, 0x27, 0x80,
	0x6d, 0xc4, 0x10, 0x48, 0xaf, 0x69, 0x12, 0x5f, 0x50, 0xe2, 0x60, 0x7c, 0xec, 0x93, 0xdd, 0x4b,
	0x56, 0xf1, 0x9f, 0xb2, 0xb9, 0x0b, 0xf1, 0x09, 0x2f, 0x03, 0x39, 0x93, 0xac, 0xe4, 0x79, 0x7a,
	0x6b, 0x6e, 0x97, 0x10, 0x50, 0x68, 0x4c, 0x28, 0x9f, 0xb2, 0x7d, 0x6d, 0x16, 0x16, 0xef, 0xc0,
	0xfb, 0xa3, 0x2c, 0x2a, 0x96, 0x4d, 0xa6, 0xf9, 0xc7, 0xe2, 0x68, 0xe5, 0xf3, 0x62, 0x16, 0xae,
	0xff, 0xe0, 0xd7, 0x47, 0xa3, 0x30, 0x60, 0x67, 0x49, 0x59, 0xd4, 0xde, 0x07, 0x65, 0x5b, 0x1c,
	0xe9, 0x1a, 0xd8, 0x1e, 0x76, 0xca, 0x90, 0xa3, 0x88, 0x89, 0x74, 0xfd, 0xd0, 0xbf, 0x99, 0xd7,
	0x71, 0xc5, 0xce, 0x8c, 0x5d, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x86, 0x6e, 0xe1, 0xd7, 0x00,
	0x00, 0x00,
}
